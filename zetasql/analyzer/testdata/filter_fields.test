[default language_features=V_1_3_FILTER_FIELDS]

[language_features={{|V_1_3_FILTER_FIELDS}}]
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2)
FROM TestTable
--
ALTERNATION GROUP: <empty>
--
ERROR: FILTER_FIELDS() is not supported [at 1:8]
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2)
       ^
--
ALTERNATION GROUP: V_1_3_FILTER_FIELDS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_1)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_2)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

SELECT FILTER_FIELDS(KitchenSink, -proto_val.int32_val)
FROM TestTable
--
ERROR: Protocol buffer zetasql_test.KitchenSinkPB does not have a field named proto_val [at 1:36]
SELECT FILTER_FIELDS(KitchenSink, -proto_val.int32_val)
                                   ^
==

SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, +nested_value.(zetasql_test.KitchenSinkPB.nested_extension_int64))
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_1)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_2)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_value.[zetasql_test.KitchenSinkPB.nested_extension_int64])
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

SELECT FILTER_FIELDS(KitchenSink.nested_value, +nested_int64)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB.Nested>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB.Nested>
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test.KitchenSinkPB.Nested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     |   +-field_descriptor=nested_value
    |     |   +-default_value=NULL
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_int64)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

SELECT FILTER_FIELDS(KitchenSink.nested_value, +(zetasql_test.KitchenSinkPB.nested_extension_int64))
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB.Nested>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB.Nested>
    |     +-expr=
    |     | +-GetProtoField
    |     |   +-type=PROTO<zetasql_test.KitchenSinkPB.Nested>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     |   +-field_descriptor=nested_value
    |     |   +-default_value=NULL
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=[zetasql_test.KitchenSinkPB.nested_extension_int64])
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Child path override parent path
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, +nested_value, -nested_value.nested_int64)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_1)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_2)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_value)
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=nested_value.nested_int64)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Child path override parent path
SELECT FILTER_FIELDS(KitchenSink, -int32_val, -nested_value, +nested_value.nested_int64)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=int32_val)
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=nested_value)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_value.nested_int64)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Include repeated fields
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, +nested_repeated_value.nested_repeated_int32)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_1)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=int64_key_2)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_repeated_value.nested_repeated_int32)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Top-level paths doesn't have the same include/exclude status.
SELECT FILTER_FIELDS(KitchenSink, -int32_val, +nested_value)
FROM TestTable
--
ERROR: Path +nested_value is invalid since the top-level message is included due to the first field path being excluded [at 1:47]
SELECT FILTER_FIELDS(KitchenSink, -int32_val, +nested_value)
                                              ^
==

# Child path override parent path
SELECT FILTER_FIELDS(KitchenSink, -int32_val, -nested_value, -nested_value.nested_int64)
FROM TestTable
--
ERROR: Path -nested_value.nested_int64 is invalid since its parent path is excluded [at 1:62]
...KitchenSink, -int32_val, -nested_value, -nested_value.nested_int64)
                                           ^
==

# Child path ordered before parent path
SELECT FILTER_FIELDS(KitchenSink, -nested_value.nested_int64, +nested_value)
FROM TestTable
--
ERROR: A child path appears before +nested_value; child paths must be added after their parent [at 1:63]
SELECT FILTER_FIELDS(KitchenSink, -nested_value.nested_int64, +nested_value)
                                                              ^
==

# Duplicated path with same inclusion/exclusion status
SELECT FILTER_FIELDS(KitchenSink, -nested_value.nested_int64, -nested_value.nested_int64)
FROM TestTable
--
ERROR: Path -nested_value.nested_int64 has already been added [at 1:63]
...KitchenSink, -nested_value.nested_int64, -nested_value.nested_int64)
                                            ^
==

# Duplicated path with same inclusion/exclusion status
SELECT FILTER_FIELDS(KitchenSink, -nested_value.nested_int64, +nested_value.nested_int64)
FROM TestTable
--
ERROR: Path +nested_value.nested_int64 has already been added [at 1:63]
...KitchenSink, -nested_value.nested_int64, +nested_value.nested_int64)
                                            ^
==

# Virtual field name
SELECT FILTER_FIELDS(KitchenSink.nested_value, -has_nested_int64)
FROM TestTable
--
ERROR: Protocol buffer zetasql_test.KitchenSinkPB.Nested does not have a field named has_nested_int64 [at 1:49]
SELECT FILTER_FIELDS(KitchenSink.nested_value, -has_nested_int64)
                                                ^
==

# Wrong type
SELECT FILTER_FIELDS(KitchenSink.int32_val, -nested_int64)
FROM TestTable
--
ERROR: FILTER_FIELDS() expected an input proto type for first argument, but found type INT32 [at 1:22]
SELECT FILTER_FIELDS(KitchenSink.int32_val, -nested_int64)
                     ^
==

# Clear a requried field
SELECT FILTER_FIELDS(KitchenSink, -int64_key_1)
FROM TestTable
--
ERROR: Field zetasql_test.KitchenSinkPB.int64_key_1 is required but will be cleared given the list of paths [at 1:8]
SELECT FILTER_FIELDS(KitchenSink, -int64_key_1)
       ^
==

# Clear a requried message
SELECT FILTER_FIELDS(KitchenSink, -nested_with_required_fields.nested_required_value)
FROM TestTable
--
ERROR: Field zetasql_test.KitchenSinkPB.NestedWithRequiredMessageFields.nested_required_value is required but will be cleared given the list of paths [at 1:8]
SELECT FILTER_FIELDS(KitchenSink, -nested_with_required_fields.nested_require...
       ^
==

# Clear a field in requried message is ok
SELECT FILTER_FIELDS(KitchenSink, -nested_with_required_fields.nested_required_value.nested_int64)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=nested_with_required_fields.nested_required_value.nested_int64)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Clear a requried message except some subfields is OK
SELECT FILTER_FIELDS(KitchenSink, -nested_with_required_fields.nested_required_value, +nested_with_required_fields.nested_required_value.nested_int64)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=nested_with_required_fields.nested_required_value)
    |       +-FilterFieldArg(include=TRUE, field_descriptor_path=nested_with_required_fields.nested_required_value.nested_int64)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Clear a message who contains requried fields is OK
SELECT FILTER_FIELDS(KitchenSink, -nested_with_required_fields)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |       +-FilterFieldArg(include=FALSE, field_descriptor_path=nested_with_required_fields)
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

# Missing a requried field
SELECT FILTER_FIELDS(KitchenSink, +int32_val)
FROM TestTable
--
ERROR: Field zetasql_test.KitchenSinkPB.int64_key_1 is required but will be cleared given the list of paths [at 1:8]
SELECT FILTER_FIELDS(KitchenSink, +int32_val)
       ^
==

# Missing a requried message field
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, +nested_with_required_fields.nested_int32_val)
FROM TestTable
--
ERROR: Field zetasql_test.KitchenSinkPB.NestedWithRequiredMessageFields.nested_required_value is required but will be cleared given the list of paths [at 1:8]
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, +nested_with_re...
       ^
