# Specify WITH ANONYMIZATION but no FROM clause
[default language_features=ANONYMIZATION,NUMERIC_TYPE]
select with anonymization sum();
--
ERROR: SELECT without FROM clause cannot specify WITH ANONYMIZATION [at 1:1]
select with anonymization sum();
^
==

# Reject non-ANON_* aggregate functions
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization sum(int64)
from SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#19]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#19]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#19 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

Rewrite ERROR: Unsupported function in SELECT WITH ANONYMIZATION select list: SUM
==

[enable_ast_rewrites]
select anon_sum(int64), sum(int64)
from SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#19 :=
          | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-$agg2#20 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

Rewrite ERROR: Unsupported function in SELECT WITH ANONYMIZATION select list: SUM
==

[enable_ast_rewrites]
[no_expect_error_location]
select {{|with anonymization|with anonymization options ()}} anon_count(*)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
          +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(int64)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_sum(int64)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

[language_features=ANONYMIZATION,NUMERIC_TYPE]
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_avg(int64)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_avg(DOUBLE, optional(0) DOUBLE, optional(0) DOUBLE) -> DOUBLE)
              +-Cast(INT64 -> DOUBLE)
                +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
        |         +-Cast(INT64 -> DOUBLE)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_avg(DOUBLE, optional(0) DOUBLE, optional(0) DOUBLE) -> DOUBLE)
        | |   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

[language_features=ANONYMIZATION,NUMERIC_TYPE]
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_avg(numeric)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.numeric#12], table=SimpleTypesWithAnonymizationUid, column_index_list=[11])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_avg(NUMERIC, optional(0) NUMERIC, optional(0) NUMERIC) -> NUMERIC)
              +-ColumnRef(type=NUMERIC, column=SimpleTypesWithAnonymizationUid.numeric#12)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[numeric#12, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[11, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:avg(NUMERIC) -> NUMERIC)
        |         +-ColumnRef(type=NUMERIC, column=SimpleTypesWithAnonymizationUid.numeric#12)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_avg(NUMERIC, optional(0) NUMERIC, optional(0) NUMERIC) -> NUMERIC)
        | |   +-ColumnRef(type=NUMERIC, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[numeric#12, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[11, 10])
}
==

[enable_ast_rewrites]
select with anonymization int32,
                          anon_count(* clamped between 0 and 1),
                          anon_count(string clamped between 0 and 10),
                          anon_sum(int64 clamped between 10 and 100)
from SimpleTypesWithAnonymizationUid
group by int32;
--
QueryStmt
+-output_column_list=
| +-$groupby.int32#16 AS int32 [INT32]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4])
        +-group_by_list=
        | +-int32#16 := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        +-aggregate_list=
          +-$agg1#13 :=
          | +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
          |   +-Literal(type=INT64, value=0)
          |   +-Literal(type=INT64, value=1)
          +-$agg2#14 :=
          | +-AggregateFunctionCall(ZetaSQL:anon_count(STRING, optional(1) INT64, optional(1) INT64) -> INT64)
          |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
          |   +-Literal(type=INT64, value=0)
          |   +-Literal(type=INT64, value=10)
          +-$agg3#15 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=10)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int32#16 AS int32 [INT32]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#19, $aggregate.$agg2_partial#21, $aggregate.$agg3_partial#23, $groupby.int32_partial#24, $group_by.$uid#25]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#17], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10])
        |   +-group_by_list=
        |   | +-int32_partial#24 := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |   | +-$uid#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#17)
        |   +-aggregate_list=
        |     +-$agg1_partial#19 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |     +-$agg2_partial#21 :=
        |     | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |     |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |     +-$agg3_partial#23 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-group_by_list=
        | +-int32#16 := ColumnRef(type=INT32, column=$groupby.int32_partial#24)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#19)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$agg2#14 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg2_partial#21)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$agg3#15 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg3_partial#23)
        | |   +-Literal(type=INT64, value=10)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#30 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#30)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#17], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10])
}
==

# support engine defined anon_* functions
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_test(int64 clamped between 0 and 1)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(sample_functions:anon_test(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(sample_functions:anon_test(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# Tests for anonymization options, which defines a small set of valid option
# names.
select with anonymization options()
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)
==

select with anonymization options(delta=0)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-delta := Literal(type=DOUBLE, value=0)
==

[enable_ast_rewrites]
select with anonymization options(delta=0, epsilon=0, kappa=0, k_threshold=0)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ERROR: The anonymization options specify all of (epsilon, delta, and k_threshold), but must only specify (epsilon, delta) or (epsilon, k_threshold) [at 1:34]
select with anonymization options(delta=0, epsilon=0, kappa=0, k_threshold=0)
                                 ^
==

# Invalid option name
select with anonymization options(foo=0)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ERROR: Unknown option: foo [at 1:35]
select with anonymization options(foo=0)
                                  ^
==

# Invalid option name (qualified option names not allowed)
select with anonymization options(f1.epsilon=0)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ERROR: Syntax error: Expected "=" but got "." [at 1:37]
select with anonymization options(f1.epsilon=0)
                                    ^
==

# Invalid option name, along with a valid option
select with anonymization options(delta=0, foo=0)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ERROR: Unknown option: foo [at 1:44]
select with anonymization options(delta=0, foo=0)
                                           ^
==

# Invalid option type (options must be numerical)
select with anonymization options({{delta|epsilon|kappa|k_threshold}}='0')
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: delta
--
ERROR: Option delta value has type STRING which cannot be coerced to expected type DOUBLE [at 1:41]
select with anonymization options(delta='0')
                                        ^
--
ALTERNATION GROUP: epsilon
--
ERROR: Option epsilon value has type STRING which cannot be coerced to expected type DOUBLE [at 1:43]
select with anonymization options(epsilon='0')
                                          ^
--
ALTERNATION GROUP: kappa
--
ERROR: Option kappa value has type STRING which cannot be coerced to expected type INT64 [at 1:41]
select with anonymization options(kappa='0')
                                        ^
--
ALTERNATION GROUP: k_threshold
--
ERROR: Option k_threshold value has type STRING which cannot be coerced to expected type INT64 [at 1:47]
select with anonymization options(k_threshold='0')
                                              ^
==

select with anonymization options(
    {{delta|epsilon|kappa|k_threshold}}=@test_param_int64)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: delta
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-delta :=
            +-Cast(INT64 -> DOUBLE)
              +-Parameter(type=INT64, name="test_param_int64")
--
ALTERNATION GROUP: epsilon
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-epsilon :=
            +-Cast(INT64 -> DOUBLE)
              +-Parameter(type=INT64, name="test_param_int64")
--
ALTERNATION GROUP: kappa
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-kappa := Parameter(type=INT64, name="test_param_int64")
--
ALTERNATION GROUP: k_threshold
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-k_threshold := Parameter(type=INT64, name="test_param_int64")
==

select with anonymization options(
    {{delta|epsilon|kappa|k_threshold}}=@test_param_double)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: delta
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-delta := Parameter(type=DOUBLE, name="test_param_double")
--
ALTERNATION GROUP: epsilon
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-epsilon := Parameter(type=DOUBLE, name="test_param_double")
--
ALTERNATION GROUP: kappa
--
ERROR: Option kappa value has type DOUBLE which cannot be coerced to expected type INT64 [at 2:11]
    kappa=@test_param_double)
          ^
--
ALTERNATION GROUP: k_threshold
--
ERROR: Option k_threshold value has type DOUBLE which cannot be coerced to expected type INT64 [at 2:17]
    k_threshold=@test_param_double)
                ^
==

select with anonymization options({{delta|epsilon|kappa|k_threshold}}=1+2)
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: delta
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-delta :=
            +-Cast(INT64 -> DOUBLE)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Literal(type=INT64, value=1)
                +-Literal(type=INT64, value=2)
--
ALTERNATION GROUP: epsilon
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-epsilon :=
            +-Cast(INT64 -> DOUBLE)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Literal(type=INT64, value=1)
                +-Literal(type=INT64, value=2)
--
ALTERNATION GROUP: kappa
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-kappa :=
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              +-Literal(type=INT64, value=1)
              +-Literal(type=INT64, value=2)
--
ALTERNATION GROUP: k_threshold
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=100)
        +-anonymization_option_list=
          +-k_threshold :=
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              +-Literal(type=INT64, value=1)
              +-Literal(type=INT64, value=2)
==

# Non-constant expressions for options fails.
# This is an attempt to reference column SimpleTypesWithAnonyizationUid.int64,
# but because options are not expressions, the 'int64' is treated as a STRING
# and this doesn't work.
select with anonymization options(epsilon={{int64|`int64`}})
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: int64
--
ERROR: Option epsilon value has type STRING which cannot be coerced to expected type DOUBLE [at 1:43]
select with anonymization options(epsilon=int64)
                                          ^
--
ALTERNATION GROUP: `int64`
--
ERROR: Option epsilon value has type STRING which cannot be coerced to expected type DOUBLE [at 1:43]
select with anonymization options(epsilon=`int64`)
                                          ^
==

# Non-constant expressions for options fails.  Because these are options,
# we need to parenthesize 'int64' so it's not treated like a raw string and
# is treated like an expression instead.  In this case, analysis still fails
# because resolving options expressions uses an empty NameScope.
select with anonymization options(epsilon=(int64))
       anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid;
--
ERROR: Unrecognized name: int64 [at 1:44]
select with anonymization options(epsilon=(int64))
                                           ^
==

# Reject queries not over private tables
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#19]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#19]
        +-input_scan=
        | +-TableScan(table=SimpleTypes)
        +-aggregate_list=
          +-$agg1#19 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: A SELECT WITH ANONYMIZATION query must query at least one table containing user data
==

# Reject queries when the $uid column type is not group-able
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from ProtoAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=ProtoAnonymizationUid)
        +-aggregate_list=
          +-$agg1#2 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: User id columns must support grouping, instead got type PROTO
==

# Valid simple WITH ANONYMIZATION query
[enable_ast_rewrites]
select {{|with anonymization}} anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# WITH ANONYMIZATION syntax can only be used with grouping/aggregation
select with anonymization string
from SimpleTypesWithAnonymizationUid
group by string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#13 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.string#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        +-group_by_list=
          +-string#13 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
==

# WITH ANONYMIZATION syntax can only be used with grouping/aggregation
select with anonymization int64
from SimpleTypesWithAnonymizationUid;
--
ERROR: SELECT WITH ANONYMIZATION queries require GROUP BY or aggregation, but neither was present [at 1:27]
select with anonymization int64
                          ^
==

# WITH ANONYMIZATION syntax can only be used with grouping/aggregation
select with anonymization int64
from SimpleTypesWithAnonymizationUid
group by int64;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#13 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-group_by_list=
          +-int64#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
==

# WITH ANONYMIZATION syntax can only be used with grouping/aggregation
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10), string, int64
from SimpleTypesWithAnonymizationUid
group by string;
--
ERROR: SELECT list expression references column int64 which is neither grouped nor aggregated [at 1:79]
...anon_count(int64 CLAMPED BETWEEN 0 AND 10), string, int64
                                                       ^
==

# Valid anonymization with GROUP BY
[enable_ast_rewrites]
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10), string
from SimpleTypesWithAnonymizationUid
group by string;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$groupby.string#14 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13, $groupby.string#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.string#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        +-group_by_list=
        | +-string#14 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$groupby.string#14 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13, $groupby.string#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.string#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#17, $groupby.string_partial#18, $group_by.$uid#19]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
        |   +-group_by_list=
        |   | +-string_partial#18 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   | +-$uid#19 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
        |   +-aggregate_list=
        |     +-$agg1_partial#17 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-group_by_list=
        | +-string#14 := ColumnRef(type=STRING, column=$groupby.string_partial#18)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#17)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$k_threshold_col#22 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#22)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
}
==

# Valid anonymization with only GROUP BY
[enable_ast_rewrites]
select with anonymization int64, string
from SimpleTypesWithAnonymizationUid
group by int64, string;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#13 AS int64 [INT64]
| +-$groupby.string#14 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=$groupby.[int64#13, string#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$groupby.[int64#13, string#14]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        +-group_by_list=
          +-int64#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
          +-string#14 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#13 AS int64 [INT64]
| +-$groupby.string#14 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=$groupby.[int64#13, string#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$groupby.[int64#13, string#14]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int64_partial#16, $groupby.string_partial#17, $group_by.$uid#18]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
        |   +-group_by_list=
        |     +-int64_partial#16 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |     +-string_partial#17 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |     +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
        +-group_by_list=
        | +-int64#13 := ColumnRef(type=INT64, column=$groupby.int64_partial#16)
        | +-string#14 := ColumnRef(type=STRING, column=$groupby.string_partial#17)
        +-aggregate_list=
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
}
==

# Non-trivial computed column
[enable_ast_rewrites]
select with anonymization 1 + anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#14 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#14]
    +-expr_list=
    | +-$col1#14 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#14 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#14]
    +-expr_list=
    | +-$col1#14 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=1)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#17, $group_by.$uid#18]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
        |   +-aggregate_list=
        |     +-$agg1_partial#17 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#17)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$k_threshold_col#21 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# Non-trivial computed column
[enable_ast_rewrites]
select with anonymization int32 + anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from SimpleTypesWithAnonymizationUid
group by int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#15]
    +-expr_list=
    | +-$col1#15 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=$groupby.int32#14)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1])
        +-group_by_list=
        | +-int32#14 := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#15]
    +-expr_list=
    | +-$col1#15 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Cast(INT32 -> INT64)
    |     | +-ColumnRef(type=INT32, column=$groupby.int32#14)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#18, $groupby.int32_partial#19, $group_by.$uid#20]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 10])
        |   +-group_by_list=
        |   | +-int32_partial#19 := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |   | +-$uid#20 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#16)
        |   +-aggregate_list=
        |     +-$agg1_partial#18 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-group_by_list=
        | +-int32#14 := ColumnRef(type=INT32, column=$groupby.int32_partial#19)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#18)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$k_threshold_col#23 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#23)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 10])
}
==

# Nested projection without $uid column
[enable_ast_rewrites]
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from (select int64 from SimpleTypesWithAnonymizationUid {{a|}});
--
ALTERNATION GROUP: a
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
        |   +-input_scan=
        |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="a")
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'a.uid'
--
ALTERNATION GROUP: <empty>
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
        |   +-input_scan=
        |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Repeated nested projection clears uid column qualifier
[enable_ast_rewrites]
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from (select int64 from (
      select a.int64, a.uid from SimpleTypesWithAnonymizationUid a));
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11]
        |       +-input_scan=
        |         +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Updated qualifers in repeated nested projection aren't handled correctly
# TODO: figure out how we can respect re-aliased qualifiers
[enable_ast_rewrites]
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from (select b.int64 from (
      select a.int64, a.uid from SimpleTypesWithAnonymizationUid a) b);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11]
        |       +-input_scan=
        |         +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Nested projection with $uid column
[enable_ast_rewrites]
select with anonymization anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from (select int64, uid from SimpleTypesWithAnonymizationUid);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11]
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#15, $group_by.$uid#16]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11]
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#16 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#15 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#15)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=10)
        | +-$k_threshold_col#19 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#19)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# Reject nested aggregation functions
select with anonymization sum(anon_count(int64 CLAMPED BETWEEN 0 AND 10))
from SimpleTypesWithAnonymizationUid;
--
ERROR: Aggregations of aggregations are not allowed [at 1:27]
select with anonymization sum(anon_count(int64 CLAMPED BETWEEN 0 AND 10))
                          ^
==

# Support basic nested aggregation scans
[enable_ast_rewrites]
[no_expect_error_location]
select {{|with anonymization}} anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select count(*), uid
  from SimpleTypesWithAnonymizationUid
  group by uid);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       +-group_by_list=
        |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#17, $group_by.$uid#18]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-aggregate_list=
        |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-group_by_list=
        |   | +-$uid#18 := ColumnRef(type=INT64, column=$groupby.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#17 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#15 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#17)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#21 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Reject nested aggregation scans that don't group by $uid
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (select count(*) from SimpleTypesWithAnonymizationUid a);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#14 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#14]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid, alias="a")
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'a.uid'
==

# Reject nested aggregation scans that don't project the grouped by $uid
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select count(*)
  from SimpleTypesWithAnonymizationUid {{a|}}
  group by uid);
--
ALTERNATION GROUP: a
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |       +-group_by_list=
        |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'a.uid'
--
ALTERNATION GROUP: <empty>
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       +-group_by_list=
        |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Projecting, aliasing, grouping don't interfere with explicitly grouping by
# $uid in nested aggregation
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
    select count(*), y
    from (
      select x, y
      from (
        select uid as x, uid as y
        from SimpleTypesWithAnonymizationUid)
      group by x, y)
    group by y)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#16]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#14, $groupby.y#15]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$groupby.y#15, $aggregate.$agg1#14]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=$groupby.[x#13, x#13]
        |       |   +-input_scan=
        |       |     +-AggregateScan
        |       |       +-column_list=[$groupby.x#13]
        |       |       +-input_scan=
        |       |       | +-ProjectScan
        |       |       |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#11]
        |       |       |   +-input_scan=
        |       |       |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |       +-group_by_list=
        |       |         +-x#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-group_by_list=
        |       | +-y#15 := ColumnRef(type=INT64, column=$groupby.x#13)
        |       +-aggregate_list=
        |         +-$agg1#14 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#16 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#16]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#18, $group_by.$uid#19]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#14, $groupby.y#15]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.y#15, $aggregate.$agg1#14]
        |   |       +-input_scan=
        |   |       | +-ProjectScan
        |   |       |   +-column_list=$groupby.[x#13, x#13]
        |   |       |   +-input_scan=
        |   |       |     +-AggregateScan
        |   |       |       +-column_list=[$groupby.x#13]
        |   |       |       +-input_scan=
        |   |       |       | +-ProjectScan
        |   |       |       |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#11]
        |   |       |       |   +-input_scan=
        |   |       |       |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       |       +-group_by_list=
        |   |       |         +-x#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-group_by_list=
        |   |       | +-y#15 := ColumnRef(type=INT64, column=$groupby.x#13)
        |   |       +-aggregate_list=
        |   |         +-$agg1#14 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-group_by_list=
        |   | +-$uid#19 := ColumnRef(type=INT64, column=$groupby.y#15)
        |   +-aggregate_list=
        |     +-$agg1_partial#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#16 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#18)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#22 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#22)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Reject mutated group by $uid column in nested aggregation
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  (select count(*), 10+uid as x
   from SimpleTypesWithAnonymizationUid {{a|}}
   group by x)
--
ALTERNATION GROUP: a
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.x#14]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$groupby.x#14, $aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |       +-group_by_list=
        |       | +-x#14 :=
        |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=10)
        |       |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'a.uid'
--
ALTERNATION GROUP: <empty>
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.x#14]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$groupby.x#14, $aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       +-group_by_list=
        |       | +-x#14 :=
        |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=10)
        |       |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Valid query using all supported per-user scan types
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select a.int64, (select 1) as b
  from (
      select count(*) as int64, uid
      from SimpleTypesWithAnonymizationUid
      group by uid) a,
    SimpleTypes b
  where a.int64 > 0 order by a.int64 limit 10);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#35 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#35]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#35]
        +-input_scan=
        | +-LimitOffsetScan
        |   +-column_list=[$aggregate.int64#13, $subquery1.b#34]
        |   +-input_scan=
        |   | +-OrderByScan
        |   |   +-column_list=[$aggregate.int64#13, $subquery1.b#34]
        |   |   +-is_ordered=TRUE
        |   |   +-input_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$aggregate.int64#13, $groupby.uid#14, $subquery1.b#34]
        |   |   |   +-expr_list=
        |   |   |   | +-b#34 :=
        |   |   |   |   +-SubqueryExpr
        |   |   |   |     +-type=INT64
        |   |   |   |     +-subquery_type=SCALAR
        |   |   |   |     +-subquery=
        |   |   |   |       +-ProjectScan
        |   |   |   |         +-column_list=[$expr_subquery.$col1#33]
        |   |   |   |         +-expr_list=
        |   |   |   |         | +-$col1#33 := Literal(type=INT64, value=1)
        |   |   |   |         +-input_scan=
        |   |   |   |           +-SingleRowScan
        |   |   |   +-input_scan=
        |   |   |     +-FilterScan
        |   |   |       +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |       +-input_scan=
        |   |   |       | +-JoinScan
        |   |   |       |   +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |       |   +-left_scan=
        |   |   |       |   | +-ProjectScan
        |   |   |       |   |   +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |       |   |   +-input_scan=
        |   |   |       |   |     +-AggregateScan
        |   |   |       |   |       +-column_list=[$groupby.uid#14, $aggregate.int64#13]
        |   |   |       |   |       +-input_scan=
        |   |   |       |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |       |   |       +-group_by_list=
        |   |   |       |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   |       |   |       +-aggregate_list=
        |   |   |       |   |         +-int64#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   |       |   +-right_scan=
        |   |   |       |     +-TableScan(table=SimpleTypes, alias="b")
        |   |   |       +-filter_expr=
        |   |   |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |   |           +-ColumnRef(type=INT64, column=$aggregate.int64#13)
        |   |   |           +-Literal(type=INT64, value=0)
        |   |   +-order_by_item_list=
        |   |     +-OrderByItem
        |   |       +-column_ref=
        |   |         +-ColumnRef(type=INT64, column=$aggregate.int64#13)
        |   +-limit=
        |     +-Literal(type=INT64, value=10)
        +-aggregate_list=
          +-$agg1#35 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#35 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#35]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#35]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#37, $group_by.$uid#38]
        |   +-input_scan=
        |   | +-LimitOffsetScan
        |   |   +-column_list=[$aggregate.int64#13, $subquery1.b#34, $groupby.uid#14]
        |   |   +-input_scan=
        |   |   | +-OrderByScan
        |   |   |   +-column_list=[$aggregate.int64#13, $subquery1.b#34, $groupby.uid#14]
        |   |   |   +-is_ordered=TRUE
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=[$aggregate.int64#13, $groupby.uid#14, $subquery1.b#34]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-b#34 :=
        |   |   |   |   |   +-SubqueryExpr
        |   |   |   |   |     +-type=INT64
        |   |   |   |   |     +-subquery_type=SCALAR
        |   |   |   |   |     +-subquery=
        |   |   |   |   |       +-ProjectScan
        |   |   |   |   |         +-column_list=[$expr_subquery.$col1#33]
        |   |   |   |   |         +-expr_list=
        |   |   |   |   |         | +-$col1#33 := Literal(type=INT64, value=1)
        |   |   |   |   |         +-input_scan=
        |   |   |   |   |           +-SingleRowScan
        |   |   |   |   +-input_scan=
        |   |   |   |     +-FilterScan
        |   |   |   |       +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |   |       +-input_scan=
        |   |   |   |       | +-JoinScan
        |   |   |   |       |   +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |   |       |   +-left_scan=
        |   |   |   |       |   | +-ProjectScan
        |   |   |   |       |   |   +-column_list=[$aggregate.int64#13, $groupby.uid#14]
        |   |   |   |       |   |   +-input_scan=
        |   |   |   |       |   |     +-AggregateScan
        |   |   |   |       |   |       +-column_list=[$groupby.uid#14, $aggregate.int64#13]
        |   |   |   |       |   |       +-input_scan=
        |   |   |   |       |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |   |       |   |       +-group_by_list=
        |   |   |   |       |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   |   |       |   |       +-aggregate_list=
        |   |   |   |       |   |         +-int64#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   |   |       |   +-right_scan=
        |   |   |   |       |     +-TableScan(table=SimpleTypes, alias="b")
        |   |   |   |       +-filter_expr=
        |   |   |   |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |   |   |           +-ColumnRef(type=INT64, column=$aggregate.int64#13)
        |   |   |   |           +-Literal(type=INT64, value=0)
        |   |   |   +-order_by_item_list=
        |   |   |     +-OrderByItem
        |   |   |       +-column_ref=
        |   |   |         +-ColumnRef(type=INT64, column=$aggregate.int64#13)
        |   |   +-limit=
        |   |     +-Literal(type=INT64, value=10)
        |   +-group_by_list=
        |   | +-$uid#38 := ColumnRef(type=INT64, column=$groupby.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#35 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#37)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#41 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Outer scan can use join, aggregation, etc. with no issues
[enable_ast_rewrites]
select count(*) from (
  select with anonymization anon_count(string CLAMPED BETWEEN 0 AND 100)
  from SimpleTypesWithAnonymizationUid)
cross join SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$aggregate.$agg1#13]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13]
        |   |   +-input_scan=
        |   |     +-AnonymizedAggregateScan
        |   |       +-column_list=[$aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        |   |       +-aggregate_list=
        |   |         +-$agg1#13 :=
        |   |           +-AggregateFunctionCall(ZetaSQL:anon_count(STRING, optional(1) INT64, optional(1) INT64) -> INT64)
        |   |             +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |             +-Literal(type=INT64, value=0)
        |   |             +-Literal(type=INT64, value=100)
        |   +-right_scan=
        |     +-TableScan(table=SimpleTypes)
        +-aggregate_list=
          +-$agg1#32 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$aggregate.$agg1#13]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13]
        |   |   +-input_scan=
        |   |     +-AnonymizedAggregateScan
        |   |       +-column_list=[$aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-AggregateScan
        |   |       |   +-column_list=[$aggregate.$agg1_partial#35, $group_by.$uid#36]
        |   |       |   +-input_scan=
        |   |       |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   |       |   +-group_by_list=
        |   |       |   | +-$uid#36 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#33)
        |   |       |   +-aggregate_list=
        |   |       |     +-$agg1_partial#35 :=
        |   |       |       +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   |       |         +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |       +-aggregate_list=
        |   |       | +-$agg1#13 :=
        |   |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |   |       | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#35)
        |   |       | |   +-Literal(type=INT64, value=0)
        |   |       | |   +-Literal(type=INT64, value=100)
        |   |       | +-$k_threshold_col#39 :=
        |   |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |   |       |     +-Literal(type=INT64, value=1)
        |   |       |     +-Literal(type=INT64, value=0)
        |   |       |     +-Literal(type=INT64, value=1)
        |   |       +-k_threshold_expr=
        |   |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#39)
        |   +-right_scan=
        |     +-TableScan(table=SimpleTypes)
        +-aggregate_list=
          +-$agg1#32 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
}
==

# Reject parameter privacy_budget_weight
[no_enable_literal_replacement]
[no_expect_error_location]
select with anonymization anon_count(string CLAMPED BETWEEN 0 AND 100, @test_param_double)
from SimpleTypesWithAnonymizationUid;
--
ERROR: Syntax error: Expected ")" but got "," [at 1:70]
...anon_count(string CLAMPED BETWEEN 0 AND 100, @test_param_double)
                                              ^
==

[enable_ast_rewrites]
[no_enable_literal_replacement]
select with anonymization
  anon_count(string CLAMPED BETWEEN 0 AND 100),
  anon_count(* CLAMPED BETWEEN 0 AND 1)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$aggregate.$agg2#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#13, $agg2#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$aggregate.[$agg1#13, $agg2#14]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        +-aggregate_list=
          +-$agg1#13 :=
          | +-AggregateFunctionCall(ZetaSQL:anon_count(STRING, optional(1) INT64, optional(1) INT64) -> INT64)
          |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
          |   +-Literal(type=INT64, value=0)
          |   +-Literal(type=INT64, value=100)
          +-$agg2#14 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$aggregate.$agg2#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#13, $agg2#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$aggregate.[$agg1#13, $agg2#14]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#17, $aggregate.$agg2_partial#19, $group_by.$uid#20]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   +-group_by_list=
        |   | +-$uid#20 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
        |   +-aggregate_list=
        |     +-$agg1_partial#17 :=
        |     | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |     |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |     +-$agg2_partial#19 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#17)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$agg2#14 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg2_partial#19)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#24 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#24)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
}
==

# Reject DISTINCT
select with anonymization distinct anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from SimpleTypesWithAnonymizationUid;
--
ERROR: SELECT WITH ANONYMIZATION does not support DISTINCT [at 1:1]
select with anonymization distinct anon_count(int64 CLAMPED BETWEEN 0 AND 10)
^
==

# Allow AS STRUCT syntax
[enable_ast_rewrites]
select with anonymization as struct anon_count(int64 CLAMPED BETWEEN 0 AND 10)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#14 AS `$struct` [STRUCT<INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#14]
    +-expr_list=
    | +-$struct#14 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$aggregate.$agg1#13]
            +-input_scan=
            | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
            +-aggregate_list=
              +-$agg1#13 :=
                +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
                  +-Literal(type=INT64, value=0)
                  +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#14 AS `$struct` [STRUCT<INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#14]
    +-expr_list=
    | +-$struct#14 :=
    |   +-MakeStruct
    |     +-type=STRUCT<INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$aggregate.$agg1#13]
            +-input_scan=
            | +-AggregateScan
            |   +-column_list=[$aggregate.$agg1_partial#17, $group_by.$uid#18]
            |   +-input_scan=
            |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   +-group_by_list=
            |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
            |   +-aggregate_list=
            |     +-$agg1_partial#17 :=
            |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
            |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            +-aggregate_list=
            | +-$agg1#13 :=
            | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
            | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#17)
            | |   +-Literal(type=INT64, value=0)
            | |   +-Literal(type=INT64, value=10)
            | +-$k_threshold_col#21 :=
            |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
            |     +-Literal(type=INT64, value=1)
            |     +-Literal(type=INT64, value=0)
            |     +-Literal(type=INT64, value=1)
            +-k_threshold_expr=
              +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# Anonymize node saves hint list
[enable_ast_rewrites]
select @{hint=1} with anonymization string
from SimpleTypesWithAnonymizationUid
group by string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#13 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#13]
    +-hint_list=
    | +-hint := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.string#13]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$groupby.string#13]
            +-input_scan=
            | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
            +-group_by_list=
              +-string#13 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#13 AS string [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#13]
    +-hint_list=
    | +-hint := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.string#13]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$groupby.string#13]
            +-input_scan=
            | +-AggregateScan
            |   +-column_list=[$groupby.string_partial#15, $group_by.$uid#16]
            |   +-input_scan=
            |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
            |   +-group_by_list=
            |     +-string_partial#15 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |     +-$uid#16 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
            +-group_by_list=
            | +-string#13 := ColumnRef(type=STRING, column=$groupby.string_partial#15)
            +-aggregate_list=
            | +-$k_threshold_col#18 :=
            |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
            |     +-Literal(type=INT64, value=1)
            |     +-Literal(type=INT64, value=0)
            |     +-Literal(type=INT64, value=1)
            +-k_threshold_expr=
              +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#18)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
}
==

# Computed column arguments are respected
[enable_ast_rewrites]
select with anonymization anon_count(int64 + int32 CLAMPED BETWEEN 0 AND 1)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
              | +-Cast(INT32 -> INT64)
              |   +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |           +-Cast(INT32 -> INT64)
        |             +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 10])
}
==

# Output computed columns are respected
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 1) + int64
from SimpleTypesWithAnonymizationUid
group by int64;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#15]
    +-expr_list=
    | +-$col1#15 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    |     +-ColumnRef(type=INT64, column=$groupby.int64#14)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-group_by_list=
        | +-int64#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#15]
    +-expr_list=
    | +-$col1#15 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#13)
    |     +-ColumnRef(type=INT64, column=$groupby.int64#14)
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#18, $groupby.int64_partial#19, $group_by.$uid#20]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-int64_partial#19 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   | +-$uid#20 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#16)
        |   +-aggregate_list=
        |     +-$agg1_partial#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-int64#14 := ColumnRef(type=INT64, column=$groupby.int64_partial#19)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#18)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#23 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#23)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# Reject cross joins on two tables containing private data, there's no ON clause
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a,
                        SimpleTypesWithAnonymizationUid b;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-left_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid, alias="a")
        |   +-right_scan=
        |     +-TableScan(table=SimpleTypesWithAnonymizationUid, alias="b")
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must explicitly join on the user id column in each table, add 'ON a.uid=b.uid'
==

# join where both tables contain user data with explicit left.uid = right.uid
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
inner join SimpleTypesWithAnonymizationUid b on a.uid = b.uid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#27, $group_by.$uid#28]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-group_by_list=
        |   | +-$uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#27)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#31)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
}
==

# don't show internal aliases for join condition errors
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
SimpleTypesWithAnonymizationUid a
full outer join SimpleTypesWithAnonymizationUid b on a.uid = b.uid
cross join SimpleTypesWithAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#37 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#37]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#37]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   |   +-join_type=FULL
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-right_scan=
        |     +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
          +-$agg1#37 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must explicitly join on the user id column in each table
==

# join where both tables contain user data with explicit using(uid)
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
inner join SimpleTypesWithAnonymizationUid b using(uid);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#27, $group_by.$uid#28]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-group_by_list=
        |   | +-$uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#27)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#31)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
}
==

# join where both tables contain user data with where a.uid=b.uid
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a, SimpleTypesWithAnonymizationUid b
where a.uid=b.uid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must explicitly join on the user id column in each table, add 'ON a.uid=b.uid'
==

# join with 'where' clause for join condition, and implicit aliasing
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid, SimpleTypesWithAnonymizationUid b
where SimpleTypesWithAnonymizationUid.uid=b.uid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must explicitly join on the user id column in each table, add 'ON uid=b.uid'
==

# use full table names as uid qualifiers where it reduces ambiguity
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from T1StringAnonymizationUid, T2StringAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-JoinScan
        |   +-left_scan=
        |   | +-TableScan(table=T1StringAnonymizationUid)
        |   +-right_scan=
        |     +-TableScan(table=T2StringAnonymizationUid)
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must explicitly join on the user id column in each table, add 'ON T1StringAnonymizationUid.uid=T2StringAnonymizationUid.uid'
==

# Nested cross/inner joins, with some tables containing user data and some not
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  ((SimpleTypes a cross join SimpleTypes b)
  cross join SimpleTypesWithAnonymizationUid c)
  inner join SimpleTypesWithAnonymizationUid d on c.uid=d.uid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#61 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#61]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#61]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#47, uid#59]
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#47]
        |   |   +-left_scan=
        |   |   | +-JoinScan
        |   |   |   +-left_scan=
        |   |   |   | +-TableScan(table=SimpleTypes, alias="a")
        |   |   |   +-right_scan=
        |   |   |     +-TableScan(table=SimpleTypes, alias="b")
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#47], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="c")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#59], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="d")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#47)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#59)
        +-aggregate_list=
          +-$agg1#61 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#61 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#61]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#61]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#63, $group_by.$uid#64]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#47, uid#59]
        |   |   +-left_scan=
        |   |   | +-JoinScan
        |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#47]
        |   |   |   +-left_scan=
        |   |   |   | +-JoinScan
        |   |   |   |   +-left_scan=
        |   |   |   |   | +-TableScan(table=SimpleTypes, alias="a")
        |   |   |   |   +-right_scan=
        |   |   |   |     +-TableScan(table=SimpleTypes, alias="b")
        |   |   |   +-right_scan=
        |   |   |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#47], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="c")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#59], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="d")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#47)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#59)
        |   +-group_by_list=
        |   | +-$uid#64 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#47)
        |   +-aggregate_list=
        |     +-$agg1_partial#63 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#61 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#63)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#67 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#67)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#47], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="c")
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#59], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="d")
}
==

# reject joins where both tables contain user data without explict uid join
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
inner join SimpleTypesWithAnonymizationUid b on a.int64 = b.int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, int64#14]
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joins between tables containing private data must also explicitly join on the user id column in each table, add 'AND a.uid=b.uid' to the join ON expression
==

# allow joins where both tables contain user data with complex join expr
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
inner join SimpleTypesWithAnonymizationUid b on (a.int64 = b.int64 and
a.int32 = b.int32 and (a.string = b.string and a.uid = b.uid));
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#11, int32#13, int64#14, string#17, uid#23]
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, string#17, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
        |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |       +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |       | +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |       | +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#13)
        |       +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |         +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |         | +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |         | +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#17)
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#27, $group_by.$uid#28]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#11, int32#13, int64#14, string#17, uid#23]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="a")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, string#17, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="b")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |   |       +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |   |       | +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |   |       | +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#13)
        |   |       +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |         +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |         | +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |         | +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#17)
        |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-group_by_list=
        |   | +-$uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#27)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#31)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="a")
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, string#17, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4, 10], alias="b")
}
==

# reject right join with non-uid right table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
right join SimpleTypes b on a.int64 = b.int64
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypes.int64#14]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: The right table in a RIGHT OUTER join must contain user data
==

# accept right join with uid right table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select b.uid from (
    SimpleTypes a
    right join SimpleTypesWithAnonymizationUid b on a.int64 = b.int64)
)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#29]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20, SimpleTypesWithAnonymizationUid.uid#29]
        |       +-join_type=RIGHT
        |       +-left_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="a")
        |       +-right_scan=
        |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#20, uid#29], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="b")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#33, $group_by.$uid#34]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#29]
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20, SimpleTypesWithAnonymizationUid.uid#29]
        |   |       +-join_type=RIGHT
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="a")
        |   |       +-right_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#20, uid#29], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="b")
        |   |       +-join_expr=
        |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        |   +-group_by_list=
        |   | +-$uid#34 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#29)
        |   +-aggregate_list=
        |     +-$agg1_partial#33 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#31 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#33)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#37 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#37)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#20, uid#29], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="b")
}
==

# reject right join projecting the wrong uid
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select a.uid from (
    SimpleTypesWithAnonymizationUid a
    right join SimpleTypesWithAnonymizationUid b on a.uid = b.uid)
)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |       +-join_type=RIGHT
        |       +-left_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |       +-right_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# accept left join with uid left table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select a.uid from (
    SimpleTypesWithAnonymizationUid a
    left join SimpleTypes b on a.int64 = b.int64)
)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.uid#11, SimpleTypes.int64#14]
        |       +-join_type=LEFT
        |       +-left_scan=
        |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        |       +-right_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#33, $group_by.$uid#34]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11]
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.uid#11, SimpleTypes.int64#14]
        |   |       +-join_type=LEFT
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        |   |       +-right_scan=
        |   |       | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        |   |       +-join_expr=
        |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-group_by_list=
        |   | +-$uid#34 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#33 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#31 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#33)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#37 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#37)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
}
==

# reject left join with non-uid left table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypes a
left join SimpleTypesWithAnonymizationUid b on a.int64 = b.int64
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: The left table in a LEFT OUTER join must contain user data
==

# reject left join projecting the wrong uid
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select b.uid from (
    SimpleTypesWithAnonymizationUid a
    left join SimpleTypesWithAnonymizationUid b on a.uid = b.uid)
)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#23]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |       +-join_type=LEFT
        |       +-left_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |       +-right_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# reject full join with non-uid left table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypes a
full outer join SimpleTypesWithAnonymizationUid b on a.int64 = b.int64
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20]
        |   +-join_type=FULL
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Both tables in a FULL OUTER join must contain user data
==

# reject full join with non-uid right table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
full outer join SimpleTypes b on a.int64 = b.int64
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypes.int64#14]
        |   +-join_type=FULL
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Both tables in a FULL OUTER join must contain user data
==

# accept full join with uid left and right table
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a
full outer join SimpleTypesWithAnonymizationUid b on a.uid = b.uid
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-join_type=FULL
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#28, $group_by.$uid#29]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.uid#23, $join.$uid#26]
        |   |   +-expr_list=
        |   |   | +-$uid#26 :=
        |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23, uid#11, uid#23]
        |   |       +-join_type=FULL
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |       +-right_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |   |       +-join_expr=
        |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-group_by_list=
        |   | +-$uid#29 := ColumnRef(type=INT64, column=$join.$uid#26)
        |   +-aggregate_list=
        |     +-$agg1_partial#28 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#28)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#32)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
}
==

# reject full join with outer scan referencing uid
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select a.uid, b.uid
  from (
    SimpleTypesWithAnonymizationUid a
    full outer join SimpleTypesWithAnonymizationUid b on a.uid = b.uid)
);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, uid#23]
        |       +-join_type=FULL
        |       +-left_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |       +-right_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="b")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column
==

# joins require matching uid types
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a, T1StringAnonymizationUid b
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#14 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#14]
        +-input_scan=
        | +-JoinScan
        |   +-left_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid, alias="a")
        |   +-right_scan=
        |     +-TableScan(table=T1StringAnonymizationUid, alias="b")
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joining two tables containing private data requires matching user id column types, instead got INT64 and STRING
==

# joins require equality comparable uid types
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from ProtoAnonymizationUid a, ProtoAnonymizationUid b
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-JoinScan
        |   +-left_scan=
        |   | +-TableScan(table=ProtoAnonymizationUid, alias="a")
        |   +-right_scan=
        |     +-TableScan(table=ProtoAnonymizationUid, alias="b")
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Joining two tables containing private data requires the user id column types to support equality comparison, instead got PROTO
==

# Support aggregation nested inside each side of a join
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  (select count(*), uid from SimpleTypesWithAnonymizationUid group by uid) a
  inner join
  (select count(*), uid from SimpleTypesWithAnonymizationUid group by uid) b
  on a.uid = b.uid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#29]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-aggregate_list=
        |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-right_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#27, $groupby.uid#28]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#28, $aggregate.$agg1#27]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |   |       +-aggregate_list=
        |   |         +-$agg1#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=$groupby.uid#14)
        |       +-ColumnRef(type=INT64, column=$groupby.uid#28)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#29]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#31, $group_by.$uid#32]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
        |   |   +-left_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   |   +-input_scan=
        |   |   |     +-AggregateScan
        |   |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |   |       +-input_scan=
        |   |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |       +-group_by_list=
        |   |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   |       +-aggregate_list=
        |   |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   +-right_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$aggregate.$agg1#27, $groupby.uid#28]
        |   |   |   +-input_scan=
        |   |   |     +-AggregateScan
        |   |   |       +-column_list=[$groupby.uid#28, $aggregate.$agg1#27]
        |   |   |       +-input_scan=
        |   |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |       +-group_by_list=
        |   |   |       | +-uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |   |   |       +-aggregate_list=
        |   |   |         +-$agg1#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=$groupby.uid#14)
        |   |       +-ColumnRef(type=INT64, column=$groupby.uid#28)
        |   +-group_by_list=
        |   | +-$uid#32 := ColumnRef(type=INT64, column=$groupby.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#31 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#29 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#31)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#35 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#35)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Support aggregation nested inside one side of a join
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  SimpleTypesWithAnonymizationUid a
  inner join
  (select count(*), uid from SimpleTypesWithAnonymizationUid group by uid) b
  on a.uid = b.uid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#27]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#27]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $aggregate.$agg1#25, $groupby.uid#26]
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   +-right_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#25, $groupby.uid#26]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#26, $aggregate.$agg1#25]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#26 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   |       +-aggregate_list=
        |   |         +-$agg1#25 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-ColumnRef(type=INT64, column=$groupby.uid#26)
        +-aggregate_list=
          +-$agg1#27 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#27]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#27]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#29, $group_by.$uid#30]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $aggregate.$agg1#25, $groupby.uid#26]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$aggregate.$agg1#25, $groupby.uid#26]
        |   |   |   +-input_scan=
        |   |   |     +-AggregateScan
        |   |   |       +-column_list=[$groupby.uid#26, $aggregate.$agg1#25]
        |   |   |       +-input_scan=
        |   |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |       +-group_by_list=
        |   |   |       | +-uid#26 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   |   |       +-aggregate_list=
        |   |   |         +-$agg1#25 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-ColumnRef(type=INT64, column=$groupby.uid#26)
        |   +-group_by_list=
        |   | +-$uid#30 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   +-aggregate_list=
        |     +-$agg1_partial#29 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#27 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#29)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#33 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#33)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Support aggregation nested inside both sides of a join, with one side
# querying a table with user data and the other not.
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  (select count(*), uid from SimpleTypesWithAnonymizationUid group by uid) a,
  (select count(*) from SimpleTypes) b;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#34 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#34]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#34]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#33]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-aggregate_list=
        |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-right_scan=
        |     +-ProjectScan
        |       +-column_list=[$aggregate.$agg1#33]
        |       +-input_scan=
        |         +-AggregateScan
        |           +-column_list=[$aggregate.$agg1#33]
        |           +-input_scan=
        |           | +-TableScan(table=SimpleTypes)
        |           +-aggregate_list=
        |             +-$agg1#33 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#34 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#34 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#34]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#34]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#36, $group_by.$uid#37]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#33]
        |   |   +-left_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   |   +-input_scan=
        |   |   |     +-AggregateScan
        |   |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |   |       +-input_scan=
        |   |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   |       +-group_by_list=
        |   |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   |       +-aggregate_list=
        |   |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   |   +-right_scan=
        |   |     +-ProjectScan
        |   |       +-column_list=[$aggregate.$agg1#33]
        |   |       +-input_scan=
        |   |         +-AggregateScan
        |   |           +-column_list=[$aggregate.$agg1#33]
        |   |           +-input_scan=
        |   |           | +-TableScan(table=SimpleTypes)
        |   |           +-aggregate_list=
        |   |             +-$agg1#33 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-group_by_list=
        |   | +-$uid#37 := ColumnRef(type=INT64, column=$groupby.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#34 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#40 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#40)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# A simple join+group by query.
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid a, SimpleTypes b
group by b.int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#14]
        |   +-left_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid, alias="a")
        |   +-right_scan=
        |     +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        +-group_by_list=
        | +-int64#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        +-aggregate_list=
          +-$agg1#31 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#35, $groupby.int64_partial#36, $group_by.$uid#37]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypes.int64#14, SimpleTypesWithAnonymizationUid.uid#33]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1], alias="b")
        |   +-group_by_list=
        |   | +-int64_partial#36 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#33)
        |   +-aggregate_list=
        |     +-$agg1_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-int64#32 := ColumnRef(type=INT64, column=$groupby.int64_partial#36)
        +-aggregate_list=
        | +-$agg1#31 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#35)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=100)
        | +-$k_threshold_col#40 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#40)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
}
==

# Support ArrayScan
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(*)
from ArrayWithAnonymizationUid t, t.int64_array a
group by a;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[ArrayWithAnonymizationUid.int64_array#1, $array.a#3]
        |   +-input_scan=
        |   | +-TableScan(column_list=[ArrayWithAnonymizationUid.int64_array#1], table=ArrayWithAnonymizationUid, column_index_list=[0], alias="t")
        |   +-array_expr=
        |   | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
        |   +-element_column=$array.a#3
        +-group_by_list=
        | +-a#5 := ColumnRef(type=INT64, column=$array.a#3)
        +-aggregate_list=
          +-$agg1#4 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#8, $groupby.a_partial#9, $group_by.$uid#10]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=[ArrayWithAnonymizationUid.int64_array#1, $array.a#3, ArrayWithAnonymizationUid.uid#6]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#6], table=ArrayWithAnonymizationUid, column_index_list=[0, 1], alias="t")
        |   |   +-array_expr=
        |   |   | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
        |   |   +-element_column=$array.a#3
        |   +-group_by_list=
        |   | +-a_partial#9 := ColumnRef(type=INT64, column=$array.a#3)
        |   | +-$uid#10 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#6)
        |   +-aggregate_list=
        |     +-$agg1_partial#8 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-a#5 := ColumnRef(type=INT64, column=$groupby.a_partial#9)
        +-aggregate_list=
        | +-$agg1#4 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#8)
        | +-$k_threshold_col#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#13)

[TableScan Groups]
{
  TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#6], table=ArrayWithAnonymizationUid, column_index_list=[0, 1], alias="t")
}
==

# Support ArrayScan with join_expr
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(*)
from ArrayWithAnonymizationUid t inner join unnest(t.int64_array) a on true;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[ArrayWithAnonymizationUid.int64_array#1]
        |   +-input_scan=
        |   | +-TableScan(column_list=[ArrayWithAnonymizationUid.int64_array#1], table=ArrayWithAnonymizationUid, column_index_list=[0], alias="t")
        |   +-array_expr=
        |   | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
        |   +-element_column=$array.a#3
        |   +-join_expr=
        |     +-Literal(type=BOOL, value=true)
        +-aggregate_list=
          +-$agg1#4 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#7, $group_by.$uid#8]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#5]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#5], table=ArrayWithAnonymizationUid, column_index_list=[0, 1], alias="t")
        |   |   +-array_expr=
        |   |   | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
        |   |   +-element_column=$array.a#3
        |   |   +-join_expr=
        |   |     +-Literal(type=BOOL, value=true)
        |   +-group_by_list=
        |   | +-$uid#8 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#5)
        |   +-aggregate_list=
        |     +-$agg1_partial#7 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#4 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#7)
        | +-$k_threshold_col#11 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#11)

[TableScan Groups]
{
  TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#5], table=ArrayWithAnonymizationUid, column_index_list=[0, 1], alias="t")
}
==

# Reject SetOperationScan
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (select 1 union all select 2);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-SetOperationScan
        |   +-column_list=[$union_all.$col1#3]
        |   +-op_type=UNION_ALL
        |   +-input_item_list=
        |     +-SetOperationItem
        |     | +-scan=
        |     | | +-ProjectScan
        |     | |   +-column_list=[$union_all1.$col1#1]
        |     | |   +-expr_list=
        |     | |   | +-$col1#1 := Literal(type=INT64, value=1)
        |     | |   +-input_scan=
        |     | |     +-SingleRowScan
        |     | +-output_column_list=[$union_all1.$col1#1]
        |     +-SetOperationItem
        |       +-scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$union_all2.$col1#2]
        |       |   +-expr_list=
        |       |   | +-$col1#2 := Literal(type=INT64, value=2)
        |       |   +-input_scan=
        |       |     +-SingleRowScan
        |       +-output_column_list=[$union_all2.$col1#2]
        +-aggregate_list=
          +-$agg1#4 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedSetOperationScan
==

# Reject WithRefScan
[enable_ast_rewrites]
[no_expect_error_location]
with with_scan as (select 1)
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from with_scan;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="with_scan"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[with_scan.$col1#1]
    |       +-expr_list=
    |       | +-$col1#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$aggregate.$agg1#3]
            +-input_scan=
            | +-WithRefScan(column_list=[with_scan.$col1#2], with_query_name="with_scan")
            +-aggregate_list=
              +-$agg1#3 :=
                +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
                  +-Literal(type=INT64, value=0)
                  +-Literal(type=INT64, value=100)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedWithRefScan
==

# Reject WithScan
[language_features=ANONYMIZATION,V_1_1_WITH_ON_SUBQUERY]
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  with with_scan as (select 1)
  select * from with_scan);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-WithScan
        |   +-column_list=[with_scan.$col1#2]
        |   +-with_entry_list=
        |   | +-WithEntry
        |   |   +-with_query_name="with_scan"
        |   |   +-with_subquery=
        |   |     +-ProjectScan
        |   |       +-column_list=[with_scan.$col1#1]
        |   |       +-expr_list=
        |   |       | +-$col1#1 := Literal(type=INT64, value=1)
        |   |       +-input_scan=
        |   |         +-SingleRowScan
        |   +-query=
        |     +-ProjectScan
        |       +-column_list=[with_scan.$col1#2]
        |       +-input_scan=
        |         +-WithRefScan(column_list=[with_scan.$col1#2], with_query_name="with_scan")
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedWithScan
==

# Reject AnalyticScan
[language_features=ANONYMIZATION,ANALYTIC_FUNCTIONS]
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from (
  select rank() over (order by int64) from SimpleTypesWithAnonymizationUid);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$analytic.$analytic1#14]
        |   +-input_scan=
        |     +-AnalyticScan
        |       +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $analytic.$analytic1#14]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |       +-function_group_list=
        |         +-AnalyticFunctionGroup
        |           +-order_by=
        |           | +-WindowOrdering
        |           |   +-order_by_item_list=
        |           |     +-OrderByItem
        |           |       +-column_ref=
        |           |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |           +-analytic_function_list=
        |             +-$analytic1#14 := AnalyticFunctionCall(ZetaSQL:rank() -> INT64)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedAnalyticScan
==

# Reject SampleScan
[language_features=ANONYMIZATION,TABLESAMPLE]
[enable_ast_rewrites]
[no_expect_error_location]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from SimpleTypesWithAnonymizationUid
tablesample reservoir (1 rows);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-input_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-method="reservoir"
        |   +-size=
        |   | +-Literal(type=INT64, value=1)
        |   +-unit=ROWS
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedSampleScan
==

# For per-user aggregation we inject ANON_SUM(1 CLAMPED BETWEEN 0 AND 1).
# This test and the next shows what the plan looks like if that aggregate
# expression is actually in the query.  The injected expression is not
# exactly the same as the query's expression.
[no_expect_error_location]
[enable_ast_rewrites]
select anon_sum(1 clamped between 0 and 1)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=1)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-Literal(type=INT64, value=1)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[no_expect_error_location]
[enable_ast_rewrites]
select int64, anon_count(*), anon_sum(1 clamped between 0 and 1)
from SimpleTypesWithAnonymizationUid
group by int64;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#15 AS int64 [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#15, $aggregate.$agg1#13, $aggregate.$agg2#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64#15, $aggregate.$agg1#13, $aggregate.$agg2#14]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-group_by_list=
        | +-int64#15 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
          +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
          +-$agg2#14 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=1)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#15 AS int64 [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#15, $aggregate.$agg1#13, $aggregate.$agg2#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64#15, $aggregate.$agg1#13, $aggregate.$agg2#14]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#18, $aggregate.$agg2_partial#20, $groupby.int64_partial#21, $group_by.$uid#22]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-int64_partial#21 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   | +-$uid#22 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#16)
        |   +-aggregate_list=
        |     +-$agg1_partial#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |     +-$agg2_partial#20 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-Literal(type=INT64, value=1)
        +-group_by_list=
        | +-int64#15 := ColumnRef(type=INT64, column=$groupby.int64_partial#21)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#18)
        | +-$agg2#14 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg2_partial#20)
        | |   +-Literal(type=INT64, value=0)
        | |   +-Literal(type=INT64, value=1)
        | +-$k_threshold_col#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#26)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

[enable_ast_rewrites]
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
UNION {{ALL|DISTINCT}}
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$union_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.anon_count#27]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.anon_count#27]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$union_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_distinct.anon_count#27]
    +-op_type=UNION_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_distinct.anon_count#27]
    +-op_type=UNION_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[enable_ast_rewrites]
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
INTERSECT {{ALL|DISTINCT}}
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$intersect_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_all.anon_count#27]
    +-op_type=INTERSECT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$intersect_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_all.anon_count#27]
    +-op_type=INTERSECT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$intersect_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_distinct.anon_count#27]
    +-op_type=INTERSECT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$intersect_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_distinct.anon_count#27]
    +-op_type=INTERSECT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[enable_ast_rewrites]
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
EXCEPT {{ALL|DISTINCT}}
select anon_count(*) as anon_count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$except_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_all.anon_count#27]
    +-op_type=EXCEPT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$except_all.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_all.anon_count#27]
    +-op_type=EXCEPT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$except_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_distinct.anon_count#27]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-anon_count#26 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-output_column_list=[$aggregate.anon_count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$except_distinct.anon_count#27 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_distinct.anon_count#27]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.anon_count#13]
      | |   +-input_scan=
      | |     +-AnonymizedAggregateScan
      | |       +-column_list=[$aggregate.anon_count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.anon_count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-anon_count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-anon_count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#30)
      | |       | +-$k_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=INT64, value=0)
      | |       |     +-Literal(type=INT64, value=1)
      | |       +-k_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#34)
      | +-output_column_list=[$aggregate.anon_count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.anon_count#26]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$aggregate.anon_count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.anon_count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-anon_count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-anon_count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#37)
        |       | +-$k_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#41)
        +-output_column_list=[$aggregate.anon_count#26]

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Anonymization in the WITH clause
[enable_ast_rewrites]
WITH t as (select anon_count(*) as anon_count
           from SimpleTypesWithAnonymizationUid)
SELECT * from t;
--
QueryStmt
+-output_column_list=
| +-t.anon_count#14 AS anon_count [INT64]
+-query=
  +-WithScan
    +-column_list=[t.anon_count#14]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$aggregate.anon_count#13]
    |       +-input_scan=
    |         +-AnonymizedAggregateScan
    |           +-column_list=[$aggregate.anon_count#13]
    |           +-input_scan=
    |           | +-TableScan(table=SimpleTypesWithAnonymizationUid)
    |           +-aggregate_list=
    |             +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
    +-query=
      +-ProjectScan
        +-column_list=[t.anon_count#14]
        +-input_scan=
          +-WithRefScan(column_list=[t.anon_count#14], with_query_name="t")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-t.anon_count#14 AS anon_count [INT64]
+-query=
  +-WithScan
    +-column_list=[t.anon_count#14]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$aggregate.anon_count#13]
    |       +-input_scan=
    |         +-AnonymizedAggregateScan
    |           +-column_list=[$aggregate.anon_count#13]
    |           +-input_scan=
    |           | +-AggregateScan
    |           |   +-column_list=[$aggregate.anon_count_partial#17, $group_by.$uid#18]
    |           |   +-input_scan=
    |           |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
    |           |   +-group_by_list=
    |           |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
    |           |   +-aggregate_list=
    |           |     +-anon_count_partial#17 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |           +-aggregate_list=
    |           | +-anon_count#13 :=
    |           | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
    |           | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#17)
    |           | +-$k_threshold_col#21 :=
    |           |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
    |           |     +-Literal(type=INT64, value=1)
    |           |     +-Literal(type=INT64, value=0)
    |           |     +-Literal(type=INT64, value=1)
    |           +-k_threshold_expr=
    |             +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)
    +-query=
      +-ProjectScan
        +-column_list=[t.anon_count#14]
        +-input_scan=
          +-WithRefScan(column_list=[t.anon_count#14], with_query_name="t")

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Table with UID in the WITH clause, anonymization in the outer SELECT
# TODO: Fix this, it should work.
[enable_ast_rewrites]
WITH t as (select *
           from SimpleTypesWithAnonymizationUid)
SELECT anon_count(*) as anon_count from t;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.anon_count#25 AS anon_count [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.anon_count#25]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12]
    |       +-input_scan=
    |         +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.anon_count#25]
        +-input_scan=
          +-AnonymizedAggregateScan
            +-column_list=[$aggregate.anon_count#25]
            +-input_scan=
            | +-WithRefScan(column_list=t.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24], with_query_name="t")
            +-aggregate_list=
              +-anon_count#25 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

Rewrite ERROR: Unsupported scan type inside of SELECT WITH ANONYMIZATION from clause: ResolvedWithRefScan
==

[enable_ast_rewrites]
SELECT *
FROM UNNEST(ARRAY(select anon_count(*) as anon_count
                  from SimpleTypesWithAnonymizationUid));
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#14 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#14]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#14]
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<INT64>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$aggregate.anon_count#13]
        |       +-input_scan=
        |         +-AnonymizedAggregateScan
        |           +-column_list=[$aggregate.anon_count#13]
        |           +-input_scan=
        |           | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |           +-aggregate_list=
        |             +-anon_count#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-element_column=$array.$unnest1#14

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#14 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#14]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#14]
        +-array_expr=
        | +-SubqueryExpr
        |   +-type=ARRAY<INT64>
        |   +-subquery_type=ARRAY
        |   +-subquery=
        |     +-ProjectScan
        |       +-column_list=[$aggregate.anon_count#13]
        |       +-input_scan=
        |         +-AnonymizedAggregateScan
        |           +-column_list=[$aggregate.anon_count#13]
        |           +-input_scan=
        |           | +-AggregateScan
        |           |   +-column_list=[$aggregate.anon_count_partial#17, $group_by.$uid#18]
        |           |   +-input_scan=
        |           |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |           |   +-group_by_list=
        |           |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
        |           |   +-aggregate_list=
        |           |     +-anon_count_partial#17 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |           +-aggregate_list=
        |           | +-anon_count#13 :=
        |           | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |           | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#17)
        |           | +-$k_threshold_col#21 :=
        |           |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |           |     +-Literal(type=INT64, value=1)
        |           |     +-Literal(type=INT64, value=0)
        |           |     +-Literal(type=INT64, value=1)
        |           +-k_threshold_expr=
        |             +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)
        +-element_column=$array.$unnest1#14

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[enable_ast_rewrites]
SELECT *
FROM UNNEST([1]) as u
WHERE EXISTS (select anon_count(*) as anon_count
                  from SimpleTypesWithAnonymizationUid);
--
QueryStmt
+-output_column_list=
| +-$array.u#1 AS u [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.u#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$array.u#1]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.u#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |   +-element_column=$array.u#1
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.anon_count#14]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.anon_count#14]
                    +-input_scan=
                    | +-TableScan(table=SimpleTypesWithAnonymizationUid)
                    +-aggregate_list=
                      +-anon_count#14 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.u#1 AS u [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.u#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$array.u#1]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.u#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |   +-element_column=$array.u#1
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.anon_count#14]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.anon_count#14]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.anon_count_partial#17, $group_by.$uid#18]
                    |   +-input_scan=
                    |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
                    |   +-group_by_list=
                    |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
                    |   +-aggregate_list=
                    |     +-anon_count_partial#17 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-aggregate_list=
                    | +-anon_count#14 :=
                    | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#17)
                    | +-$k_threshold_col#21 :=
                    |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=0)
                    |     +-Literal(type=INT64, value=1)
                    +-k_threshold_expr=
                      +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

[enable_ast_rewrites]
SELECT *
FROM UNNEST([1]) as u
WHERE u IN (select anon_count(*) as anon_count
            from SimpleTypesWithAnonymizationUid);
--
QueryStmt
+-output_column_list=
| +-$array.u#1 AS u [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.u#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$array.u#1]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.u#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |   +-element_column=$array.u#1
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-ColumnRef(type=INT64, column=$array.u#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.anon_count#14]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.anon_count#14]
                    +-input_scan=
                    | +-TableScan(table=SimpleTypesWithAnonymizationUid)
                    +-aggregate_list=
                      +-anon_count#14 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.u#1 AS u [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.u#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[$array.u#1]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.u#1]
        |   +-array_expr=
        |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |   +-element_column=$array.u#1
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-ColumnRef(type=INT64, column=$array.u#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$aggregate.anon_count#14]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.anon_count#14]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.anon_count_partial#17, $group_by.$uid#18]
                    |   +-input_scan=
                    |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
                    |   +-group_by_list=
                    |   | +-$uid#18 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#15)
                    |   +-aggregate_list=
                    |     +-anon_count_partial#17 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-aggregate_list=
                    | +-anon_count#14 :=
                    | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#17)
                    | +-$k_threshold_col#21 :=
                    |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=0)
                    |     +-Literal(type=INT64, value=1)
                    +-k_threshold_expr=
                      +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#21)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
}
==

# Anonymized query against a PROTO value table that does not explicitly
# select any columns.
[enable_ast_rewrites]
[no_expect_error_location]
SELECT ANON_COUNT(*)
FROM KitchenSinkWithUidValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=KitchenSinkWithUidValueTable)
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $group_by.$uid#7]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$table_scan.$value#3, $project.$string_val#4]
        |   |   +-expr_list=
        |   |   | +-$string_val#4 :=
        |   |   |   +-GetProtoField
        |   |   |     +-type=STRING
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=$table_scan.$value#3)
        |   |   |     +-field_descriptor=string_val
        |   |   |     +-default_value="default_name"
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[$table_scan.$value#3], table=KitchenSinkWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#7 := ColumnRef(type=STRING, column=$project.$string_val#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#10 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#10)

[TableScan Groups]
{
  TableScan(column_list=[$table_scan.$value#3], table=KitchenSinkWithUidValueTable, column_index_list=[0])
}
==

# Anonymized query against a PROTO value table that explicitly references
# non-userid columns (the userid column is 'string_val').
[enable_ast_rewrites]
[no_expect_error_location]
SELECT int32_val, ANON_SUM(int64_val)
FROM KitchenSinkWithUidValueTable
GROUP BY int32_val;
--
QueryStmt
+-output_column_list=
| +-$groupby.int32_val#3 AS int32_val [INT32]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32_val#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32_val#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
        +-group_by_list=
        | +-int32_val#3 :=
        |   +-GetProtoField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |     +-field_descriptor=int32_val
        |     +-default_value=77
        +-aggregate_list=
          +-$agg1#2 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-GetProtoField
                +-type=INT64
                +-expr=
                | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
                +-field_descriptor=int64_val
                +-default_value=0

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int32_val#3 AS int32_val [INT32]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int32_val#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int32_val#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $groupby.int32_val_partial#7, $group_by.$uid#8]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[KitchenSinkWithUidValueTable.value#1, $project.$string_val#4]
        |   |   +-expr_list=
        |   |   | +-$string_val#4 :=
        |   |   |   +-GetProtoField
        |   |   |     +-type=STRING
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |   |   |     +-field_descriptor=string_val
        |   |   |     +-default_value="default_name"
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-int32_val_partial#7 :=
        |   | | +-GetProtoField
        |   | |   +-type=INT32
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |   | |   +-field_descriptor=int32_val
        |   | |   +-default_value=77
        |   | +-$uid#8 := ColumnRef(type=STRING, column=$project.$string_val#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-GetProtoField
        |           +-type=INT64
        |           +-expr=
        |           | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |           +-field_descriptor=int64_val
        |           +-default_value=0
        +-group_by_list=
        | +-int32_val#3 := ColumnRef(type=INT32, column=$groupby.int32_val_partial#7)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#11 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#11)

[TableScan Groups]
{
  TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
}
==

# Anonymized query against a PROTO value table that explicitly references
# userid and non-userid columns (the userid column is 'string_val').
[enable_ast_rewrites]
[no_expect_error_location]
SELECT int64_val, ANON_COUNT(string_val)
FROM KitchenSinkWithUidValueTable
GROUP BY int64_val;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64_val#3 AS int64_val [INT64]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64_val#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64_val#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
        +-group_by_list=
        | +-int64_val#3 :=
        |   +-GetProtoField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |     +-field_descriptor=int64_val
        |     +-default_value=0
        +-aggregate_list=
          +-$agg1#2 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(STRING, optional(0) INT64, optional(0) INT64) -> INT64)
              +-GetProtoField
                +-type=STRING
                +-expr=
                | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
                +-field_descriptor=string_val
                +-default_value="default_name"

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64_val#3 AS int64_val [INT64]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64_val#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.int64_val#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $groupby.int64_val_partial#7, $group_by.$uid#8]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[KitchenSinkWithUidValueTable.value#1, $project.$string_val#4]
        |   |   +-expr_list=
        |   |   | +-$string_val#4 :=
        |   |   |   +-GetProtoField
        |   |   |     +-type=STRING
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |   |   |     +-field_descriptor=string_val
        |   |   |     +-default_value="default_name"
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-int64_val_partial#7 :=
        |   | | +-GetProtoField
        |   | |   +-type=INT64
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |   | |   +-field_descriptor=int64_val
        |   | |   +-default_value=0
        |   | +-$uid#8 := ColumnRef(type=STRING, column=$project.$string_val#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |         +-GetProtoField
        |           +-type=STRING
        |           +-expr=
        |           | +-ColumnRef(type=PROTO<zetasql_test.KitchenSinkPB>, column=KitchenSinkWithUidValueTable.value#1)
        |           +-field_descriptor=string_val
        |           +-default_value="default_name"
        +-group_by_list=
        | +-int64_val#3 := ColumnRef(type=INT64, column=$groupby.int64_val_partial#7)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#11 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#11)

[TableScan Groups]
{
  TableScan(column_list=[KitchenSinkWithUidValueTable.value#1], table=KitchenSinkWithUidValueTable, column_index_list=[0])
}
==

# Anonymized query against a STRUCT value table that does not explicitly
# reference any columns.
[enable_ast_rewrites]
[no_expect_error_location]
SELECT ANON_COUNT(*)
FROM TestStructWithUidValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=TestStructWithUidValueTable)
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $group_by.$uid#7]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$table_scan.$value#3, $project.$a#4]
        |   |   +-expr_list=
        |   |   | +-$a#4 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT32
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$table_scan.$value#3)
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[$table_scan.$value#3], table=TestStructWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#7 := ColumnRef(type=INT32, column=$project.$a#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#10 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#10)

[TableScan Groups]
{
  TableScan(column_list=[$table_scan.$value#3], table=TestStructWithUidValueTable, column_index_list=[0])
}
==

# Anonymized query against a PROTO value table that explicitly references
# non-userid columns (the userid column is 'a').
[enable_ast_rewrites]
[no_expect_error_location]
SELECT b, ANON_COUNT(*)
FROM TestStructWithUidValueTable
GROUP BY b;
--
QueryStmt
+-output_column_list=
| +-$groupby.b#3 AS b [STRING]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
        +-group_by_list=
        | +-b#3 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.b#3 AS b [STRING]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $groupby.b_partial#7, $group_by.$uid#8]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[TestStructWithUidValueTable.value#1, $project.$a#4]
        |   |   +-expr_list=
        |   |   | +-$a#4 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT32
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-b_partial#7 :=
        |   | | +-GetStructField
        |   | |   +-type=STRING
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |   | |   +-field_idx=1
        |   | +-$uid#8 := ColumnRef(type=INT32, column=$project.$a#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-b#3 := ColumnRef(type=STRING, column=$groupby.b_partial#7)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#11 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#11)

[TableScan Groups]
{
  TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
}
==

# Anonymized query against a PROTO value table that explicitly references
# userid and non-userid columns.
[enable_ast_rewrites]
[no_expect_error_location]
SELECT b, ANON_SUM(a)
FROM TestStructWithUidValueTable
GROUP BY b;
--
QueryStmt
+-output_column_list=
| +-$groupby.b#3 AS b [STRING]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
        +-group_by_list=
        | +-b#3 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#2 :=
            +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-Cast(INT32 -> INT64)
                +-GetStructField
                  +-type=INT32
                  +-expr=
                  | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
                  +-field_idx=0

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.b#3 AS b [STRING]
| +-$aggregate.$agg1#2 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$groupby.b#3, $aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $groupby.b_partial#7, $group_by.$uid#8]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[TestStructWithUidValueTable.value#1, $project.$a#4]
        |   |   +-expr_list=
        |   |   | +-$a#4 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT32
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-b_partial#7 :=
        |   | | +-GetStructField
        |   | |   +-type=STRING
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |   | |   +-field_idx=1
        |   | +-$uid#8 := ColumnRef(type=INT32, column=$project.$a#4)
        |   +-aggregate_list=
        |     +-$agg1_partial#6 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |         +-Cast(INT32 -> INT64)
        |           +-GetStructField
        |             +-type=INT32
        |             +-expr=
        |             | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=TestStructWithUidValueTable.value#1)
        |             +-field_idx=0
        +-group_by_list=
        | +-b#3 := ColumnRef(type=STRING, column=$groupby.b_partial#7)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | +-$k_threshold_col#11 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#11)

[TableScan Groups]
{
  TableScan(column_list=[TestStructWithUidValueTable.value#1], table=TestStructWithUidValueTable, column_index_list=[0])
}
==

# Nested anonymization
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  ((select with anonymization anon_count(*), uid
       from SimpleTypesWithAnonymizationUid group by uid) a
  inner join
  (select count(*), uid from SimpleTypesWithAnonymizationUid group by uid) b
  on a.uid = b.uid);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#29]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   |   +-input_scan=
        |   |     +-AnonymizedAggregateScan
        |   |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       +-aggregate_list=
        |   |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        |   +-right_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$aggregate.$agg1#27, $groupby.uid#28]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.uid#28, $aggregate.$agg1#27]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |       +-group_by_list=
        |   |       | +-uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |   |       +-aggregate_list=
        |   |         +-$agg1#27 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=$groupby.uid#14)
        |       +-ColumnRef(type=INT64, column=$groupby.uid#28)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Nested anonymization
[enable_ast_rewrites]
select with anonymization anon_count(* CLAMPED BETWEEN 0 AND 100)
from
  (select count(*), uid
      from (select with anonymization anon_count(*), uid
                from SimpleTypesWithAnonymizationUid group by uid)
      group by uid);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#17]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#15, $groupby.uid#16]
        |   +-input_scan=
        |     +-AggregateScan
        |       +-column_list=[$groupby.uid#16, $aggregate.$agg1#15]
        |       +-input_scan=
        |       | +-ProjectScan
        |       |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |       |   +-input_scan=
        |       |     +-AnonymizedAggregateScan
        |       |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |       |       +-input_scan=
        |       |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |       +-group_by_list=
        |       |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       |       +-aggregate_list=
        |       |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        |       +-group_by_list=
        |       | +-uid#16 := ColumnRef(type=INT64, column=$groupby.uid#14)
        |       +-aggregate_list=
        |         +-$agg1#15 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
          +-$agg1#17 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=100)

Rewrite ERROR: Subqueries of anonymization queries must explicitly SELECT the userid column 'uid'
==

# Join anonymization
[enable_ast_rewrites]
select * from
  ((select with anonymization anon_count(*), uid
       from SimpleTypesWithAnonymizationUid group by uid) a
  inner join
  (select with anonymization anon_sum(int64), uid
       from SimpleTypesWithAnonymizationUid group by uid) b
  on a.uid = b.uid);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$groupby.uid#14 AS uid [INT64]
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$groupby.uid#28 AS uid [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
    +-input_scan=
      +-JoinScan
        +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       +-group_by_list=
        |       | +-uid#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-aggregate_list=
        |         +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)
        +-right_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#27, $groupby.uid#28]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$groupby.uid#28, $aggregate.$agg1#27]
        |       +-input_scan=
        |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#16, uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |       +-group_by_list=
        |       | +-uid#28 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |       +-aggregate_list=
        |         +-$agg1#27 :=
        |           +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |             +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#16)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.uid#14)
            +-ColumnRef(type=INT64, column=$groupby.uid#28)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$groupby.uid#14 AS uid [INT64]
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$groupby.uid#28 AS uid [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
    +-input_scan=
      +-JoinScan
        +-column_list=[$aggregate.$agg1#13, $groupby.uid#14, $aggregate.$agg1#27, $groupby.uid#28]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#13, $groupby.uid#14]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$groupby.uid#14, $aggregate.$agg1#13]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.$agg1_partial#30, $groupby.uid_partial#31, $group_by.$uid#32]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-uid_partial#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       |   | +-$uid#32 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       |   +-aggregate_list=
        |       |     +-$agg1_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-group_by_list=
        |       | +-uid#14 := ColumnRef(type=INT64, column=$groupby.uid_partial#31)
        |       +-aggregate_list=
        |       | +-$agg1#13 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#30)
        |       | +-$k_threshold_col#35 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#35)
        +-right_scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.$agg1#27, $groupby.uid#28]
        |   +-input_scan=
        |     +-AnonymizedAggregateScan
        |       +-column_list=[$groupby.uid#28, $aggregate.$agg1#27]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.$agg1_partial#37, $groupby.uid_partial#38, $group_by.$uid#39]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#16, uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |       |   +-group_by_list=
        |       |   | +-uid_partial#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |       |   | +-$uid#39 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#25)
        |       |   +-aggregate_list=
        |       |     +-$agg1_partial#37 :=
        |       |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |       |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#16)
        |       +-group_by_list=
        |       | +-uid#28 := ColumnRef(type=INT64, column=$groupby.uid_partial#38)
        |       +-aggregate_list=
        |       | +-$agg1#27 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#37)
        |       | +-$k_threshold_col#42 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=INT64, value=0)
        |       |     +-Literal(type=INT64, value=1)
        |       +-k_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#42)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.uid#14)
            +-ColumnRef(type=INT64, column=$groupby.uid#28)

[TableScan Groups]
{
  TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
},
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#16, uid#25], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

[enable_ast_rewrites]
[mode=expression]
(select with anonymization anon_count(int64)
from SimpleTypesWithAnonymizationUid)
--
SubqueryExpr
+-type=INT64
+-subquery_type=SCALAR
+-subquery=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)

[REWRITTEN AST]
SubqueryExpr
+-type=INT64
+-subquery_type=SCALAR
+-subquery=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 :=
        |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | +-$k_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#20)

[TableScan Groups]
{
  TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
}
==

# doubly nested struct uid
[enable_ast_rewrites]
select with anonymization anon_count(*)
       from TestWithDoublyNestedStructUidValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=TestWithDoublyNestedStructUidValueTable)
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#8, $group_by.$uid#9]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$table_scan.$value#3, $project.$a#6]
        |   |   +-expr_list=
        |   |   | +-$a#6 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT32
        |   |   |     +-expr=
        |   |   |     | +-GetStructField
        |   |   |     |   +-type=STRUCT<a INT32, b STRING>
        |   |   |     |   +-expr=
        |   |   |     |   | +-GetStructField
        |   |   |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |   |   |     |   |   +-expr=
        |   |   |     |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=$table_scan.$value#3)
        |   |   |     |   |   +-field_idx=1
        |   |   |     |   +-field_idx=1
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[$table_scan.$value#3], table=TestWithDoublyNestedStructUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#9 := ColumnRef(type=INT32, column=$project.$a#6)
        |   +-aggregate_list=
        |     +-$agg1_partial#8 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#8)
        | +-$k_threshold_col#12 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#12)

[TableScan Groups]
{
  TableScan(column_list=[$table_scan.$value#3], table=TestWithDoublyNestedStructUidValueTable, column_index_list=[0])
}
==

# nested proto uid
[enable_ast_rewrites]
select with anonymization anon_count(*)
       from TestWithProtoUidValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=TestWithProtoUidValueTable)
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#8, $group_by.$uid#9]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$table_scan.$value#3, $project.$nested_int64#6]
        |   |   +-expr_list=
        |   |   | +-$nested_int64#6 :=
        |   |   |   +-GetProtoField
        |   |   |     +-type=INT64
        |   |   |     +-expr=
        |   |   |     | +-GetProtoField
        |   |   |     |   +-type=PROTO<zetasql_test.KitchenSinkPB.Nested>
        |   |   |     |   +-expr=
        |   |   |     |   | +-GetProtoField
        |   |   |     |   |   +-type=PROTO<zetasql_test.KitchenSinkPB>
        |   |   |     |   |   +-expr=
        |   |   |     |   |   | +-ColumnRef(type=PROTO<zetasql_test.MessageWithKitchenSinkPB>, column=$table_scan.$value#3)
        |   |   |     |   |   +-field_descriptor=kitchen_sink
        |   |   |     |   |   +-default_value=NULL
        |   |   |     |   +-field_descriptor=nested_value
        |   |   |     |   +-default_value=NULL
        |   |   |     +-field_descriptor=nested_int64
        |   |   |     +-default_value=88
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[$table_scan.$value#3], table=TestWithProtoUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#9 := ColumnRef(type=INT64, column=$project.$nested_int64#6)
        |   +-aggregate_list=
        |     +-$agg1_partial#8 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#8)
        | +-$k_threshold_col#12 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#12)

[TableScan Groups]
{
  TableScan(column_list=[$table_scan.$value#3], table=TestWithProtoUidValueTable, column_index_list=[0])
}
==

# nested proto uid of wrong type.
[enable_ast_rewrites]
select with anonymization anon_count(*)
       from TestWithWrongTypeProtoUidValueTable;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(table=TestWithWrongTypeProtoUidValueTable)
        +-aggregate_list=
          +-$agg1#2 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

Rewrite ERROR: User id columns must support grouping, instead got type PROTO
==

# TODO support join on nested struct uid.
# JOIN on doubly nested struct uid
[enable_ast_rewrites]
select with anonymization anon_count(*)
       from TestWithDoublyNestedStructUidValueTable t1 inner join
            TestWithDoublyNestedStructUidValueTable t2 on t1.f.d.a = t2.f.d.a;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=TestWithDoublyNestedStructUidValueTable.[value#1, value#2]
        |   +-left_scan=
        |   | +-TableScan(column_list=[TestWithDoublyNestedStructUidValueTable.value#1], table=TestWithDoublyNestedStructUidValueTable, column_index_list=[0], alias="t1")
        |   +-right_scan=
        |   | +-TableScan(column_list=[TestWithDoublyNestedStructUidValueTable.value#2], table=TestWithDoublyNestedStructUidValueTable, column_index_list=[0], alias="t2")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |       +-GetStructField
        |       | +-type=INT32
        |       | +-expr=
        |       | | +-GetStructField
        |       | |   +-type=STRUCT<a INT32, b STRING>
        |       | |   +-expr=
        |       | |   | +-GetStructField
        |       | |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |       | |   |   +-expr=
        |       | |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=TestWithDoublyNestedStructUidValueTable.value#1)
        |       | |   |   +-field_idx=1
        |       | |   +-field_idx=1
        |       | +-field_idx=0
        |       +-GetStructField
        |         +-type=INT32
        |         +-expr=
        |         | +-GetStructField
        |         |   +-type=STRUCT<a INT32, b STRING>
        |         |   +-expr=
        |         |   | +-GetStructField
        |         |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |         |   |   +-expr=
        |         |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=TestWithDoublyNestedStructUidValueTable.value#2)
        |         |   |   +-field_idx=1
        |         |   +-field_idx=1
        |         +-field_idx=0
        +-aggregate_list=
          +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

Rewrite ERROR: Joins between tables containing private data must also explicitly join on the user id column in each table

