# Tests for the RETURNING clause

## Delete Statement
# TODO: Remove no_show_parse_location_text after parse locations
# have been manually verified as correct.
[default no_show_parse_location_text]

delete from T then return *
--
DeleteStatement [0-27]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-27]
    SelectList [26-27]
      SelectColumn [26-27]
        Star(*) [26-27]
--
DELETE T
THEN RETURN
  *
==

delete from T then return with action *
--
DeleteStatement [0-39]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-39]
    SelectList [38-39]
      SelectColumn [38-39]
        Star(*) [38-39]
    Alias [14-39]
      Identifier(ACTION) [31-37]
--
DELETE T
THEN RETURN WITH ACTION AS ACTION
  *
==

delete from T then return with action as myaction *
--
DeleteStatement [0-51]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-51]
    SelectList [50-51]
      SelectColumn [50-51]
        Star(*) [50-51]
    Alias [14-51]
      Identifier(myaction) [41-49]
--
DELETE T
THEN RETURN WITH ACTION AS myaction
  *
==

delete from T then return col1, col2
--
DeleteStatement [0-36]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-36]
    SelectList [26-36]
      SelectColumn [26-30]
        PathExpression [26-30]
          Identifier(col1) [26-30]
      SelectColumn [32-36]
        PathExpression [32-36]
          Identifier(col2) [32-36]
--
DELETE T
THEN RETURN
  col1,
  col2
==

delete from T then return col1 as newcol, col2
--
DeleteStatement [0-46]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-46]
    SelectList [26-46]
      SelectColumn [26-40]
        PathExpression [26-30]
          Identifier(col1) [26-30]
        Alias [31-40]
          Identifier(newcol) [34-40]
      SelectColumn [42-46]
        PathExpression [42-46]
          Identifier(col2) [42-46]
--
DELETE T
THEN RETURN
  col1 AS newcol,
  col2
==

# "WITH ACTION" by default will use "action" as the output column name.
# The resolver will fail on this because alias "action" is duplicated in
# top-level output column list.

delete from T then return with action col1 as action, col2
--
DeleteStatement [0-58]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-58]
    SelectList [38-58]
      SelectColumn [38-52]
        PathExpression [38-42]
          Identifier(col1) [38-42]
        Alias [43-52]
          Identifier(action) [46-52]
      SelectColumn [54-58]
        PathExpression [54-58]
          Identifier(col2) [54-58]
    Alias [14-58]
      Identifier(ACTION) [31-37]
--
DELETE T
THEN RETURN WITH ACTION AS ACTION
  col1 AS action,
  col2
==

# The resolver will fail on this because alias "myaction" is duplicated in
# top-level output column list.

delete from T then return with action as myaction col1 as myaction, col2
--
DeleteStatement [0-72]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-72]
    SelectList [50-72]
      SelectColumn [50-66]
        PathExpression [50-54]
          Identifier(col1) [50-54]
        Alias [55-66]
          Identifier(myaction) [58-66]
      SelectColumn [68-72]
        PathExpression [68-72]
          Identifier(col2) [68-72]
    Alias [14-72]
      Identifier(myaction) [41-49]
--
DELETE T
THEN RETURN WITH ACTION AS myaction
  col1 AS myaction,
  col2
==

delete from T then return abs(col1), col2, col3+col2+1
--
DeleteStatement [0-54]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-54]
    SelectList [26-54]
      SelectColumn [26-35]
        FunctionCall [26-35]
          PathExpression [26-29]
            Identifier(abs) [26-29]
          PathExpression [30-34]
            Identifier(col1) [30-34]
      SelectColumn [37-41]
        PathExpression [37-41]
          Identifier(col2) [37-41]
      SelectColumn [43-54]
        BinaryExpression(+) [43-54]
          BinaryExpression(+) [43-52]
            PathExpression [43-47]
              Identifier(col3) [43-47]
            PathExpression [48-52]
              Identifier(col2) [48-52]
          IntLiteral(1) [53-54]
--
DELETE T
THEN RETURN
  abs(col1),
  col2,
  col3 + col2 + 1

==

delete from T then return with action abs(col1), col2
--
DeleteStatement [0-53]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-53]
    SelectList [38-53]
      SelectColumn [38-47]
        FunctionCall [38-47]
          PathExpression [38-41]
            Identifier(abs) [38-41]
          PathExpression [42-46]
            Identifier(col1) [42-46]
      SelectColumn [49-53]
        PathExpression [49-53]
          Identifier(col2) [49-53]
    Alias [14-53]
      Identifier(ACTION) [31-37]
--
DELETE T
THEN RETURN WITH ACTION AS ACTION
  abs(col1),
  col2

==

delete from T then return action
--
DeleteStatement [0-32]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-32]
    SelectList [26-32]
      SelectColumn [26-32]
        PathExpression [26-32]
          Identifier(action) [26-32]
--
DELETE T
THEN RETURN
  action

==

delete from T then return *, a, 3, b+c

--
DeleteStatement [0-38]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-38]
    SelectList [26-38]
      SelectColumn [26-27]
        Star(*) [26-27]
      SelectColumn [29-30]
        PathExpression [29-30]
          Identifier(a) [29-30]
      SelectColumn [32-33]
        IntLiteral(3) [32-33]
      SelectColumn [35-38]
        BinaryExpression(+) [35-38]
          PathExpression [35-36]
            Identifier(b) [35-36]
          PathExpression [37-38]
            Identifier(c) [37-38]
--
DELETE T
THEN RETURN
  *,
  a,
  3,
  b + c
==

delete from T then return with action *, a, 3, b+c

--
DeleteStatement [0-50]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-50]
    SelectList [38-50]
      SelectColumn [38-39]
        Star(*) [38-39]
      SelectColumn [41-42]
        PathExpression [41-42]
          Identifier(a) [41-42]
      SelectColumn [44-45]
        IntLiteral(3) [44-45]
      SelectColumn [47-50]
        BinaryExpression(+) [47-50]
          PathExpression [47-48]
            Identifier(b) [47-48]
          PathExpression [49-50]
            Identifier(c) [49-50]
    Alias [14-50]
      Identifier(ACTION) [31-37]
--
DELETE T
THEN RETURN WITH ACTION AS ACTION
  *,
  a,
  3,
  b + c
==

delete from T then return with action as myaction *, a, 3, b+c

--
DeleteStatement [0-62]
  PathExpression [12-13]
    Identifier(T) [12-13]
  ReturningClause [14-62]
    SelectList [50-62]
      SelectColumn [50-51]
        Star(*) [50-51]
      SelectColumn [53-54]
        PathExpression [53-54]
          Identifier(a) [53-54]
      SelectColumn [56-57]
        IntLiteral(3) [56-57]
      SelectColumn [59-62]
        BinaryExpression(+) [59-62]
          PathExpression [59-60]
            Identifier(b) [59-60]
          PathExpression [61-62]
            Identifier(c) [61-62]
    Alias [14-62]
      Identifier(myaction) [41-49]
--
DELETE T
THEN RETURN WITH ACTION AS myaction
  *,
  a,
  3,
  b + c
==

delete from T then return
--
ERROR: Syntax error: Unexpected end of statement [at 1:26]
delete from T then return
                         ^
==

## Update Statement

update T set x=y then return *

--
UpdateStatement [0-30]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-30]
    SelectList [29-30]
      SelectColumn [29-30]
        Star(*) [29-30]
--
UPDATE T
SET
  x = y
THEN RETURN
  *
==

update T set x=y then return with action *

--
UpdateStatement [0-42]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-42]
    SelectList [41-42]
      SelectColumn [41-42]
        Star(*) [41-42]
    Alias [17-42]
      Identifier(ACTION) [34-40]
--
UPDATE T
SET
  x = y
THEN RETURN WITH ACTION AS ACTION
  *
==

update T set x=y then return a
--
UpdateStatement [0-30]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-30]
    SelectList [29-30]
      SelectColumn [29-30]
        PathExpression [29-30]
          Identifier(a) [29-30]
--
UPDATE T
SET
  x = y
THEN RETURN
  a
==

update T set x=y then return a+1
--
UpdateStatement [0-32]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-32]
    SelectList [29-32]
      SelectColumn [29-32]
        BinaryExpression(+) [29-32]
          PathExpression [29-30]
            Identifier(a) [29-30]
          IntLiteral(1) [31-32]
--
UPDATE T
SET
  x = y
THEN RETURN
  a + 1
==

update T set x=y then return with action a
--
UpdateStatement [0-42]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-42]
    SelectList [41-42]
      SelectColumn [41-42]
        PathExpression [41-42]
          Identifier(a) [41-42]
    Alias [17-42]
      Identifier(ACTION) [34-40]
--
UPDATE T
SET
  x = y
THEN RETURN WITH ACTION AS ACTION
  a
==

# The resolver will fail on this because alias "myaction" is duplicated in
# top-level output column list.

update T set x=y then return with action as myaction a as myaction
--
UpdateStatement [0-66]
  PathExpression [7-8]
    Identifier(T) [7-8]
  UpdateItemList [13-16]
    UpdateItem [13-16]
      UpdateSetValue [13-16]
        PathExpression [13-14]
          Identifier(x) [13-14]
        PathExpression [15-16]
          Identifier(y) [15-16]
  ReturningClause [17-66]
    SelectList [53-66]
      SelectColumn [53-66]
        PathExpression [53-54]
          Identifier(a) [53-54]
        Alias [55-66]
          Identifier(myaction) [58-66]
    Alias [17-66]
      Identifier(myaction) [44-52]
--
UPDATE T
SET
  x = y
THEN RETURN WITH ACTION AS myaction
  a AS myaction
==

## Insert Statement

INSERT INTO T VALUES (a, b) then return *;

--
InsertStatement [0-41]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-41]
    SelectList [40-41]
      SelectColumn [40-41]
        Star(*) [40-41]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN
  *

==

INSERT INTO T VALUES (a, b) then return a, b, abs(c);

--
InsertStatement [0-52]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-52]
    SelectList [40-52]
      SelectColumn [40-41]
        PathExpression [40-41]
          Identifier(a) [40-41]
      SelectColumn [43-44]
        PathExpression [43-44]
          Identifier(b) [43-44]
      SelectColumn [46-52]
        FunctionCall [46-52]
          PathExpression [46-49]
            Identifier(abs) [46-49]
          PathExpression [50-51]
            Identifier(c) [50-51]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN
  a,
  b,
  abs(c)
==

INSERT INTO T VALUES (a, b) then return *, c;

--
InsertStatement [0-44]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-44]
    SelectList [40-44]
      SelectColumn [40-41]
        Star(*) [40-41]
      SelectColumn [43-44]
        PathExpression [43-44]
          Identifier(c) [43-44]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN
  *,
  c
==

INSERT INTO T VALUES (a, b) then return with action *;

--
InsertStatement [0-53]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-53]
    SelectList [52-53]
      SelectColumn [52-53]
        Star(*) [52-53]
    Alias [28-53]
      Identifier(ACTION) [45-51]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN WITH ACTION AS ACTION
  *
==

INSERT INTO T VALUES (a, b) then return with action *, c;

--
InsertStatement [0-56]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-56]
    SelectList [52-56]
      SelectColumn [52-53]
        Star(*) [52-53]
      SelectColumn [55-56]
        PathExpression [55-56]
          Identifier(c) [55-56]
    Alias [28-56]
      Identifier(ACTION) [45-51]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN WITH ACTION AS ACTION
  *,
  c
==

INSERT INTO T VALUES (a, b) then return with action as myaction c;

--
InsertStatement [0-65]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-65]
    SelectList [64-65]
      SelectColumn [64-65]
        PathExpression [64-65]
          Identifier(c) [64-65]
    Alias [28-65]
      Identifier(myaction) [55-63]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN WITH ACTION AS myaction
  c

==

INSERT INTO T VALUES (a, b) then return with action as myaction c colc;

--
InsertStatement [0-70]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-70]
    SelectList [64-70]
      SelectColumn [64-70]
        PathExpression [64-65]
          Identifier(c) [64-65]
        Alias [66-70]
          Identifier(colc) [66-70]
    Alias [28-70]
      Identifier(myaction) [55-63]
# POST-COMMENT FROM MISSING PART

--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN WITH ACTION AS myaction
  c AS colc
==

# The resolver will fail on this because alias "myaction" is duplicated in
# top-level output column list.

INSERT INTO T VALUES (a, b) then return with action as myaction c as myaction;

--
InsertStatement [0-77]
  PathExpression [12-13]
    Identifier(T) [12-13]
  InsertValuesRowList [14-27]
    InsertValuesRow [21-27]
      PathExpression [22-23]
        Identifier(a) [22-23]
      PathExpression [25-26]
        Identifier(b) [25-26]
  ReturningClause [28-77]
    SelectList [64-77]
      SelectColumn [64-77]
        PathExpression [64-65]
          Identifier(c) [64-65]
        Alias [66-77]
          Identifier(myaction) [69-77]
    Alias [28-77]
      Identifier(myaction) [55-63]
--
INSERT INTO T
VALUES
  (a, b)
THEN RETURN WITH ACTION AS myaction
  c AS myaction
