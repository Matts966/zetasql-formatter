# The initial few test cases document the errors when oneof(WHERE, GROUP BY, HAVING)
# is missing before QUALIFY. We require those to be present to make resolve parser
# ambiguity in the short term. More details at (broken link)
# TODO: Remove no_show_parse_location_text after parse locations
# have been manually verified as correct.
[default no_show_parse_location_text]
select f1, f2 from T QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
ERROR: Syntax error: Expected end of input but got identifier "row_number" [at 1:30]
select f1, f2 from T QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
                             ^
==

select f1, f2 from T QUALIFY QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
ERROR: Syntax error: Expected end of input but got keyword QUALIFY [at 1:30]
select f1, f2 from T QUALIFY QUALIFY row_number() OVER (PARTITION BY f2 ORDER...
                             ^
==

# QUALIFY language option disabled when QUALIFY is used as a table alias
[no_allow_qualify]
select f1, f2 from T QUALIFY
--
QueryStatement [0-28]
  Query [0-28]
    Select [0-28]
      SelectList [7-13]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
      FromClause [14-28]
        TablePathExpression [19-28]
          PathExpression [19-20]
            Identifier(T) [19-20]
          Alias [21-28]
            Identifier(QUALIFY) [21-28]
--
SELECT
  f1,
  f2
FROM
  T AS QUALIFY
==

# QUALIFY language option disabled when QUALIFY is used as a clause
[no_allow_qualify]
select f1, f2 from T WHERE true QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
ERROR: QUALIFY is not supported [at 1:33]
select f1, f2 from T WHERE true QUALIFY row_number() OVER (PARTITION BY f2 OR...
                                ^
==

select f1, f2 from T WHERE true QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
QueryStatement [0-91]
  Query [0-91]
    Select [0-91]
      SelectList [7-13]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
      FromClause [14-20]
        TablePathExpression [19-20]
          PathExpression [19-20]
            Identifier(T) [19-20]
      WhereClause [21-31]
        BooleanLiteral(true) [27-31]
      Qualify [32-91]
        BinaryExpression(=) [40-91]
          AnalyticFunctionCall [40-87]
            FunctionCall [40-52]
              PathExpression [40-50]
                Identifier(row_number) [40-50]
            WindowSpecification [58-87]
              PartitionBy [59-74]
                PathExpression [72-74]
                  Identifier(f2) [72-74]
              OrderBy [75-86]
                OrderingExpression(ASC) [84-86]
                  PathExpression [84-86]
                    Identifier(f3) [84-86]
          IntLiteral(1) [90-91]
--
SELECT
  f1,
  f2
FROM
  T
WHERE
  true
QUALIFY row_number() OVER (PARTITION BY f2
  ORDER BY f3) = 1
==

select f1, f2 from T GROUP BY f1, f2 QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
QueryStatement [0-96]
  Query [0-96]
    Select [0-96]
      SelectList [7-13]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
      FromClause [14-20]
        TablePathExpression [19-20]
          PathExpression [19-20]
            Identifier(T) [19-20]
      GroupBy [21-36]
        GroupingItem [30-32]
          PathExpression [30-32]
            Identifier(f1) [30-32]
        GroupingItem [34-36]
          PathExpression [34-36]
            Identifier(f2) [34-36]
      Qualify [37-96]
        BinaryExpression(=) [45-96]
          AnalyticFunctionCall [45-92]
            FunctionCall [45-57]
              PathExpression [45-55]
                Identifier(row_number) [45-55]
            WindowSpecification [63-92]
              PartitionBy [64-79]
                PathExpression [77-79]
                  Identifier(f2) [77-79]
              OrderBy [80-91]
                OrderingExpression(ASC) [89-91]
                  PathExpression [89-91]
                    Identifier(f3) [89-91]
          IntLiteral(1) [95-96]
--
SELECT
  f1,
  f2
FROM
  T
GROUP BY f1, f2
QUALIFY row_number() OVER (PARTITION BY f2
  ORDER BY f3) = 1
==

select f1, f2 from T HAVING SUM(f1) < 3 QUALIFY row_number() OVER (PARTITION BY f2 ORDER BY f3) = 1
--
QueryStatement [0-99]
  Query [0-99]
    Select [0-99]
      SelectList [7-13]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
      FromClause [14-20]
        TablePathExpression [19-20]
          PathExpression [19-20]
            Identifier(T) [19-20]
      Having [21-39]
        BinaryExpression(<) [28-39]
          FunctionCall [28-35]
            PathExpression [28-31]
              Identifier(SUM) [28-31]
            PathExpression [32-34]
              Identifier(f1) [32-34]
          IntLiteral(3) [38-39]
      Qualify [40-99]
        BinaryExpression(=) [48-99]
          AnalyticFunctionCall [48-95]
            FunctionCall [48-60]
              PathExpression [48-58]
                Identifier(row_number) [48-58]
            WindowSpecification [66-95]
              PartitionBy [67-82]
                PathExpression [80-82]
                  Identifier(f2) [80-82]
              OrderBy [83-94]
                OrderingExpression(ASC) [92-94]
                  PathExpression [92-94]
                    Identifier(f3) [92-94]
          IntLiteral(1) [98-99]
--
SELECT
  f1,
  f2
FROM
  T
HAVING SUM(f1) < 3
QUALIFY row_number() OVER (PARTITION BY f2
  ORDER BY f3) = 1
==

select f1, f2, f3, row_number() OVER (PARTITION BY f2 ORDER BY f3) as row_num from T WHERE true QUALIFY row_num = 1
--
QueryStatement [0-115]
  Query [0-115]
    Select [0-115]
      SelectList [7-77]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-13]
          PathExpression [11-13]
            Identifier(f2) [11-13]
        SelectColumn [15-17]
          PathExpression [15-17]
            Identifier(f3) [15-17]
        SelectColumn [19-77]
          AnalyticFunctionCall [19-66]
            FunctionCall [19-31]
              PathExpression [19-29]
                Identifier(row_number) [19-29]
            WindowSpecification [37-66]
              PartitionBy [38-53]
                PathExpression [51-53]
                  Identifier(f2) [51-53]
              OrderBy [54-65]
                OrderingExpression(ASC) [63-65]
                  PathExpression [63-65]
                    Identifier(f3) [63-65]
          Alias [67-77]
            Identifier(row_num) [70-77]
      FromClause [78-84]
        TablePathExpression [83-84]
          PathExpression [83-84]
            Identifier(T) [83-84]
      WhereClause [85-95]
        BooleanLiteral(true) [91-95]
      Qualify [96-115]
        BinaryExpression(=) [104-115]
          PathExpression [104-111]
            Identifier(row_num) [104-111]
          IntLiteral(1) [114-115]
--
SELECT
  f1,
  f2,
  f3,
  row_number() OVER (PARTITION BY f2
    ORDER BY f3) AS row_num
FROM
  T
WHERE
  true
QUALIFY row_num = 1
==

select f1, sum(f2) over (partition by f1) as sum_f2
  from T
  where f2 < 4
  group by f1, f2
  having sum(f3) > 3
  qualify sum_f2 in (
    select min(f1)
      from test
      group by f1
      having min(f3) > 3);
--
QueryStatement [0-215]
  Query [0-215]
    Select [0-215]
      SelectList [7-51]
        SelectColumn [7-9]
          PathExpression [7-9]
            Identifier(f1) [7-9]
        SelectColumn [11-51]
          AnalyticFunctionCall [11-41]
            FunctionCall [11-18]
              PathExpression [11-14]
                Identifier(sum) [11-14]
              PathExpression [15-17]
                Identifier(f2) [15-17]
            WindowSpecification [24-41]
              PartitionBy [25-40]
                PathExpression [38-40]
                  Identifier(f1) [38-40]
          Alias [42-51]
            Identifier(sum_f2) [45-51]
      FromClause [54-60]
        TablePathExpression [59-60]
          PathExpression [59-60]
            Identifier(T) [59-60]
      WhereClause [63-75]
        BinaryExpression(<) [69-75]
          PathExpression [69-71]
            Identifier(f2) [69-71]
          IntLiteral(4) [74-75]
      GroupBy [78-93]
        GroupingItem [87-89]
          PathExpression [87-89]
            Identifier(f1) [87-89]
        GroupingItem [91-93]
          PathExpression [91-93]
            Identifier(f2) [91-93]
      Having [96-114]
        BinaryExpression(>) [103-114]
          FunctionCall [103-110]
            PathExpression [103-106]
              Identifier(sum) [103-106]
            PathExpression [107-109]
              Identifier(f3) [107-109]
          IntLiteral(3) [113-114]
      Qualify [117-215]
        InExpression(IN) [132-215]
          PathExpression [125-131]
            Identifier(sum_f2) [125-131]
          Query [141-214]
            Select [141-214]
              SelectList [148-155]
                SelectColumn [148-155]
                  FunctionCall [148-155]
                    PathExpression [148-151]
                      Identifier(min) [148-151]
                    PathExpression [152-154]
                      Identifier(f1) [152-154]
              FromClause [162-171]
                TablePathExpression [167-171]
                  PathExpression [167-171]
                    Identifier(test) [167-171]
              GroupBy [178-189]
                GroupingItem [187-189]
                  PathExpression [187-189]
                    Identifier(f1) [187-189]
              Having [196-214]
                BinaryExpression(>) [203-214]
                  FunctionCall [203-210]
                    PathExpression [203-206]
                      Identifier(min) [203-206]
                    PathExpression [207-209]
                      Identifier(f3) [207-209]
                  IntLiteral(3) [213-214]
--
SELECT
  f1,
  sum(f2) OVER (PARTITION BY f1) AS sum_f2
FROM
  T
WHERE
  f2 < 4
GROUP BY f1, f2
HAVING sum(f3) > 3
QUALIFY sum_f2 IN (
  SELECT
    min(f1)
  FROM
    test
  GROUP BY f1
  HAVING min(f3) > 3
)
==
