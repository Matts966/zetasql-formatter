# Parser tests for the CREATE TABLE FUNCTION statement with alternation groups.
# These tests are in a separate file for easier reviewing.
#
# This is a parser test with all combinations of features for different
# optional parts of the CREATE TABLE FUNCTION statement. Each combination
# parses successfully. The analyzer later examines the parsed options and
# returns errors for those that are semantically invalid.
# TODO: Remove no_show_parse_location_text after parse locations
# have been manually verified as correct.
[default no_show_parse_location_text]
create
{{or replace|}}
{{temporary|}}
{{external|}}
table function
{{if not exists|}}
myfunction()
{{returns table<x int64>|}}
{{options(d=e)|}}
{{language testlang|}}
{{as select 1 as x|}};
--
ALTERNATION GROUPS:
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,options(d=e),,
    or replace,temporary,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,language testlang,
    or replace,temporary,external,if not exists,returns table<x int64>,,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,
    or replace,temporary,external,if not exists,,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,if not exists,,options(d=e),language testlang,
    or replace,temporary,external,if not exists,,options(d=e),,as select 1 as x
    or replace,temporary,external,if not exists,,options(d=e),,
    or replace,temporary,external,if not exists,,,language testlang,as select 1 as x
    or replace,temporary,external,if not exists,,,language testlang,
    or replace,temporary,external,if not exists,,,,as select 1 as x
    or replace,temporary,external,if not exists,,,,
    or replace,temporary,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,options(d=e),language testlang,
    or replace,temporary,external,,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,options(d=e),,
    or replace,temporary,external,,returns table<x int64>,,language testlang,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,language testlang,
    or replace,temporary,external,,returns table<x int64>,,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,
    or replace,temporary,external,,,options(d=e),language testlang,as select 1 as x
    or replace,temporary,external,,,options(d=e),language testlang,
    or replace,temporary,external,,,options(d=e),,as select 1 as x
    or replace,temporary,external,,,options(d=e),,
    or replace,temporary,external,,,,language testlang,as select 1 as x
    or replace,temporary,external,,,,language testlang,
    or replace,temporary,external,,,,,as select 1 as x
    or replace,temporary,external,,,,,
    or replace,,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    or replace,,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,options(d=e),,
    or replace,,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,language testlang,
    or replace,,external,if not exists,returns table<x int64>,,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,
    or replace,,external,if not exists,,options(d=e),language testlang,as select 1 as x
    or replace,,external,if not exists,,options(d=e),language testlang,
    or replace,,external,if not exists,,options(d=e),,as select 1 as x
    or replace,,external,if not exists,,options(d=e),,
    or replace,,external,if not exists,,,language testlang,as select 1 as x
    or replace,,external,if not exists,,,language testlang,
    or replace,,external,if not exists,,,,as select 1 as x
    or replace,,external,if not exists,,,,
    or replace,,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    or replace,,external,,returns table<x int64>,options(d=e),language testlang,
    or replace,,external,,returns table<x int64>,options(d=e),,as select 1 as x
    or replace,,external,,returns table<x int64>,options(d=e),,
    or replace,,external,,returns table<x int64>,,language testlang,as select 1 as x
    or replace,,external,,returns table<x int64>,,language testlang,
    or replace,,external,,returns table<x int64>,,,as select 1 as x
    or replace,,external,,returns table<x int64>,,,
    or replace,,external,,,options(d=e),language testlang,as select 1 as x
    or replace,,external,,,options(d=e),language testlang,
    or replace,,external,,,options(d=e),,as select 1 as x
    or replace,,external,,,options(d=e),,
    or replace,,external,,,,language testlang,as select 1 as x
    or replace,,external,,,,language testlang,
    or replace,,external,,,,,as select 1 as x
    or replace,,external,,,,,
    temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,options(d=e),language testlang,
    temporary,external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,options(d=e),,
    temporary,external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,language testlang,
    temporary,external,if not exists,returns table<x int64>,,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,
    temporary,external,if not exists,,options(d=e),language testlang,as select 1 as x
    temporary,external,if not exists,,options(d=e),language testlang,
    temporary,external,if not exists,,options(d=e),,as select 1 as x
    temporary,external,if not exists,,options(d=e),,
    temporary,external,if not exists,,,language testlang,as select 1 as x
    temporary,external,if not exists,,,language testlang,
    temporary,external,if not exists,,,,as select 1 as x
    temporary,external,if not exists,,,,
    temporary,external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    temporary,external,,returns table<x int64>,options(d=e),language testlang,
    temporary,external,,returns table<x int64>,options(d=e),,as select 1 as x
    temporary,external,,returns table<x int64>,options(d=e),,
    temporary,external,,returns table<x int64>,,language testlang,as select 1 as x
    temporary,external,,returns table<x int64>,,language testlang,
    temporary,external,,returns table<x int64>,,,as select 1 as x
    temporary,external,,returns table<x int64>,,,
    temporary,external,,,options(d=e),language testlang,as select 1 as x
    temporary,external,,,options(d=e),language testlang,
    temporary,external,,,options(d=e),,as select 1 as x
    temporary,external,,,options(d=e),,
    temporary,external,,,,language testlang,as select 1 as x
    temporary,external,,,,language testlang,
    temporary,external,,,,,as select 1 as x
    temporary,external,,,,,
    external,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    external,if not exists,returns table<x int64>,options(d=e),language testlang,
    external,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
    external,if not exists,returns table<x int64>,options(d=e),,
    external,if not exists,returns table<x int64>,,language testlang,as select 1 as x
    external,if not exists,returns table<x int64>,,language testlang,
    external,if not exists,returns table<x int64>,,,as select 1 as x
    external,if not exists,returns table<x int64>,,,
    external,if not exists,,options(d=e),language testlang,as select 1 as x
    external,if not exists,,options(d=e),language testlang,
    external,if not exists,,options(d=e),,as select 1 as x
    external,if not exists,,options(d=e),,
    external,if not exists,,,language testlang,as select 1 as x
    external,if not exists,,,language testlang,
    external,if not exists,,,,as select 1 as x
    external,if not exists,,,,
    external,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
    external,,returns table<x int64>,options(d=e),language testlang,
    external,,returns table<x int64>,options(d=e),,as select 1 as x
    external,,returns table<x int64>,options(d=e),,
    external,,returns table<x int64>,,language testlang,as select 1 as x
    external,,returns table<x int64>,,language testlang,
    external,,returns table<x int64>,,,as select 1 as x
    external,,returns table<x int64>,,,
    external,,,options(d=e),language testlang,as select 1 as x
    external,,,options(d=e),language testlang,
    external,,,options(d=e),,as select 1 as x
    external,,,options(d=e),,
    external,,,,language testlang,as select 1 as x
    external,,,,language testlang,
    external,,,,,as select 1 as x
    external,,,,,
--
ERROR: Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported [at 4:1]
external
^
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-141]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  OptionsList [101-106]
    OptionsEntry [102-105]
      Identifier(d) [102-103]
      PathExpression [104-105]
        Identifier(e) [104-105]
  Identifier(testlang) [116-124]
  Query [128-141]
    Select [128-141]
      SelectList [135-141]
        SelectColumn [135-141]
          IntLiteral(1) [135-136]
          Alias [137-141]
            Identifier(x) [140-141]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  OptionsList [101-106]
    OptionsEntry [102-105]
      Identifier(d) [102-103]
      PathExpression [104-105]
        Identifier(e) [104-105]
  Identifier(testlang) [116-124]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  OptionsList [101-106]
    OptionsEntry [102-105]
      Identifier(d) [102-103]
      PathExpression [104-105]
        Identifier(e) [104-105]
  Query [111-124]
    Select [111-124]
      SelectList [118-124]
        SelectColumn [118-124]
          IntLiteral(1) [118-119]
          Alias [120-124]
            Identifier(x) [123-124]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-106]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  OptionsList [101-106]
    OptionsEntry [102-105]
      Identifier(d) [102-103]
      PathExpression [104-105]
        Identifier(e) [104-105]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-129]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  Identifier(testlang) [104-112]
  Query [116-129]
    Select [116-129]
      SelectList [123-129]
        SelectColumn [123-129]
          IntLiteral(1) [123-124]
          Alias [125-129]
            Identifier(x) [128-129]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-112]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  Identifier(testlang) [104-112]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-112]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
  Query [99-112]
    Select [99-112]
      SelectList [106-112]
        SelectColumn [106-112]
          IntLiteral(1) [106-107]
          Alias [108-112]
            Identifier(x) [111-112]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-93]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  TVFSchema [79-93]
    TVFSchemaColumn [85-92]
      Identifier(x) [85-86]
      SimpleType [87-92]
        PathExpression [87-92]
          Identifier(int64) [87-92]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-119]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Identifier(testlang) [94-102]
  Query [106-119]
    Select [106-119]
      SelectList [113-119]
        SelectColumn [113-119]
          IntLiteral(1) [113-114]
          Alias [115-119]
            Identifier(x) [118-119]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-102]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Identifier(testlang) [94-102]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-102]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Query [89-102]
    Select [89-102]
      SelectList [96-102]
        SelectColumn [96-102]
          IntLiteral(1) [96-97]
          Alias [98-102]
            Identifier(x) [101-102]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-84]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-107]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  Identifier(testlang) [82-90]
  Query [94-107]
    Select [94-107]
      SelectList [101-107]
        SelectColumn [101-107]
          IntLiteral(1) [101-102]
          Alias [103-107]
            Identifier(x) [106-107]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-90]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  Identifier(testlang) [82-90]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-90]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
  Query [77-90]
    Select [77-90]
      SelectList [84-90]
        SelectColumn [84-90]
          IntLiteral(1) [84-85]
          Alias [86-90]
            Identifier(x) [89-90]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-70]
  FunctionDeclaration [58-70]
    PathExpression [58-68]
      Identifier(myfunction) [58-68]
    FunctionParameters [68-70]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-128]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  OptionsList [88-93]
    OptionsEntry [89-92]
      Identifier(d) [89-90]
      PathExpression [91-92]
        Identifier(e) [91-92]
  Identifier(testlang) [103-111]
  Query [115-128]
    Select [115-128]
      SelectList [122-128]
        SelectColumn [122-128]
          IntLiteral(1) [122-123]
          Alias [124-128]
            Identifier(x) [127-128]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  OptionsList [88-93]
    OptionsEntry [89-92]
      Identifier(d) [89-90]
      PathExpression [91-92]
        Identifier(e) [91-92]
  Identifier(testlang) [103-111]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  OptionsList [88-93]
    OptionsEntry [89-92]
      Identifier(d) [89-90]
      PathExpression [91-92]
        Identifier(e) [91-92]
  Query [98-111]
    Select [98-111]
      SelectList [105-111]
        SelectColumn [105-111]
          IntLiteral(1) [105-106]
          Alias [107-111]
            Identifier(x) [110-111]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-93]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  OptionsList [88-93]
    OptionsEntry [89-92]
      Identifier(d) [89-90]
      PathExpression [91-92]
        Identifier(e) [91-92]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-116]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  Identifier(testlang) [91-99]
  Query [103-116]
    Select [103-116]
      SelectList [110-116]
        SelectColumn [110-116]
          IntLiteral(1) [110-111]
          Alias [112-116]
            Identifier(x) [115-116]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-99]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  Identifier(testlang) [91-99]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-99]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
  Query [86-99]
    Select [86-99]
      SelectList [93-99]
        SelectColumn [93-99]
          IntLiteral(1) [93-94]
          Alias [95-99]
            Identifier(x) [98-99]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-80]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  TVFSchema [66-80]
    TVFSchemaColumn [72-79]
      Identifier(x) [72-73]
      SimpleType [74-79]
        PathExpression [74-79]
          Identifier(int64) [74-79]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-106]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  OptionsList [66-71]
    OptionsEntry [67-70]
      Identifier(d) [67-68]
      PathExpression [69-70]
        Identifier(e) [69-70]
  Identifier(testlang) [81-89]
  Query [93-106]
    Select [93-106]
      SelectList [100-106]
        SelectColumn [100-106]
          IntLiteral(1) [100-101]
          Alias [102-106]
            Identifier(x) [105-106]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-89]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  OptionsList [66-71]
    OptionsEntry [67-70]
      Identifier(d) [67-68]
      PathExpression [69-70]
        Identifier(e) [69-70]
  Identifier(testlang) [81-89]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-89]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  OptionsList [66-71]
    OptionsEntry [67-70]
      Identifier(d) [67-68]
      PathExpression [69-70]
        Identifier(e) [69-70]
  Query [76-89]
    Select [76-89]
      SelectList [83-89]
        SelectColumn [83-89]
          IntLiteral(1) [83-84]
          Alias [85-89]
            Identifier(x) [88-89]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-71]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  OptionsList [66-71]
    OptionsEntry [67-70]
      Identifier(d) [67-68]
      PathExpression [69-70]
        Identifier(e) [69-70]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,temporary,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-94]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  Identifier(testlang) [69-77]
  Query [81-94]
    Select [81-94]
      SelectList [88-94]
        SelectColumn [88-94]
          IntLiteral(1) [88-89]
          Alias [90-94]
            Identifier(x) [93-94]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-77]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  Identifier(testlang) [69-77]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-77]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
  Query [64-77]
    Select [64-77]
      SelectList [71-77]
        SelectColumn [71-77]
          IntLiteral(1) [71-72]
          Alias [73-77]
            Identifier(x) [76-77]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-57]
  FunctionDeclaration [45-57]
    PathExpression [45-55]
      Identifier(myfunction) [45-55]
    FunctionParameters [55-57]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-132]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  OptionsList [92-97]
    OptionsEntry [93-96]
      Identifier(d) [93-94]
      PathExpression [95-96]
        Identifier(e) [95-96]
  Identifier(testlang) [107-115]
  Query [119-132]
    Select [119-132]
      SelectList [126-132]
        SelectColumn [126-132]
          IntLiteral(1) [126-127]
          Alias [128-132]
            Identifier(x) [131-132]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  OptionsList [92-97]
    OptionsEntry [93-96]
      Identifier(d) [93-94]
      PathExpression [95-96]
        Identifier(e) [95-96]
  Identifier(testlang) [107-115]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  OptionsList [92-97]
    OptionsEntry [93-96]
      Identifier(d) [93-94]
      PathExpression [95-96]
        Identifier(e) [95-96]
  Query [102-115]
    Select [102-115]
      SelectList [109-115]
        SelectColumn [109-115]
          IntLiteral(1) [109-110]
          Alias [111-115]
            Identifier(x) [114-115]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-97]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  OptionsList [92-97]
    OptionsEntry [93-96]
      Identifier(d) [93-94]
      PathExpression [95-96]
        Identifier(e) [95-96]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-120]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  Identifier(testlang) [95-103]
  Query [107-120]
    Select [107-120]
      SelectList [114-120]
        SelectColumn [114-120]
          IntLiteral(1) [114-115]
          Alias [116-120]
            Identifier(x) [119-120]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-103]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  Identifier(testlang) [95-103]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-103]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
  Query [90-103]
    Select [90-103]
      SelectList [97-103]
        SelectColumn [97-103]
          IntLiteral(1) [97-98]
          Alias [99-103]
            Identifier(x) [102-103]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-84]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  TVFSchema [70-84]
    TVFSchemaColumn [76-83]
      Identifier(x) [76-77]
      SimpleType [78-83]
        PathExpression [78-83]
          Identifier(int64) [78-83]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-110]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  OptionsList [70-75]
    OptionsEntry [71-74]
      Identifier(d) [71-72]
      PathExpression [73-74]
        Identifier(e) [73-74]
  Identifier(testlang) [85-93]
  Query [97-110]
    Select [97-110]
      SelectList [104-110]
        SelectColumn [104-110]
          IntLiteral(1) [104-105]
          Alias [106-110]
            Identifier(x) [109-110]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-93]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  OptionsList [70-75]
    OptionsEntry [71-74]
      Identifier(d) [71-72]
      PathExpression [73-74]
        Identifier(e) [73-74]
  Identifier(testlang) [85-93]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-93]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  OptionsList [70-75]
    OptionsEntry [71-74]
      Identifier(d) [71-72]
      PathExpression [73-74]
        Identifier(e) [73-74]
  Query [80-93]
    Select [80-93]
      SelectList [87-93]
        SelectColumn [87-93]
          IntLiteral(1) [87-88]
          Alias [89-93]
            Identifier(x) [92-93]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-75]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  OptionsList [70-75]
    OptionsEntry [71-74]
      Identifier(d) [71-72]
      PathExpression [73-74]
        Identifier(e) [73-74]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-98]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  Identifier(testlang) [73-81]
  Query [85-98]
    Select [85-98]
      SelectList [92-98]
        SelectColumn [92-98]
          IntLiteral(1) [92-93]
          Alias [94-98]
            Identifier(x) [97-98]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-81]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  Identifier(testlang) [73-81]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-81]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
  Query [68-81]
    Select [68-81]
      SelectList [75-81]
        SelectColumn [75-81]
          IntLiteral(1) [75-76]
          Alias [77-81]
            Identifier(x) [80-81]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-61]
  FunctionDeclaration [49-61]
    PathExpression [49-59]
      Identifier(myfunction) [49-59]
    FunctionParameters [59-61]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-119]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Identifier(testlang) [94-102]
  Query [106-119]
    Select [106-119]
      SelectList [113-119]
        SelectColumn [113-119]
          IntLiteral(1) [113-114]
          Alias [115-119]
            Identifier(x) [118-119]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-102]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Identifier(testlang) [94-102]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-102]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
  Query [89-102]
    Select [89-102]
      SelectList [96-102]
        SelectColumn [96-102]
          IntLiteral(1) [96-97]
          Alias [98-102]
            Identifier(x) [101-102]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace) [0-84]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  OptionsList [79-84]
    OptionsEntry [80-83]
      Identifier(d) [80-81]
      PathExpression [82-83]
        Identifier(e) [82-83]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-107]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  Identifier(testlang) [82-90]
  Query [94-107]
    Select [94-107]
      SelectList [101-107]
        SelectColumn [101-107]
          IntLiteral(1) [101-102]
          Alias [103-107]
            Identifier(x) [106-107]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-90]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  Identifier(testlang) [82-90]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-90]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
  Query [77-90]
    Select [77-90]
      SelectList [84-90]
        SelectColumn [84-90]
          IntLiteral(1) [84-85]
          Alias [86-90]
            Identifier(x) [89-90]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_or_replace) [0-71]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  TVFSchema [57-71]
    TVFSchemaColumn [63-70]
      Identifier(x) [63-64]
      SimpleType [65-70]
        PathExpression [65-70]
          Identifier(int64) [65-70]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-97]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  OptionsList [57-62]
    OptionsEntry [58-61]
      Identifier(d) [58-59]
      PathExpression [60-61]
        Identifier(e) [60-61]
  Identifier(testlang) [72-80]
  Query [84-97]
    Select [84-97]
      SelectList [91-97]
        SelectColumn [91-97]
          IntLiteral(1) [91-92]
          Alias [93-97]
            Identifier(x) [96-97]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-80]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  OptionsList [57-62]
    OptionsEntry [58-61]
      Identifier(d) [58-59]
      PathExpression [60-61]
        Identifier(e) [60-61]
  Identifier(testlang) [72-80]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-80]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  OptionsList [57-62]
    OptionsEntry [58-61]
      Identifier(d) [58-59]
      PathExpression [60-61]
        Identifier(e) [60-61]
  Query [67-80]
    Select [67-80]
      SelectList [74-80]
        SelectColumn [74-80]
          IntLiteral(1) [74-75]
          Alias [76-80]
            Identifier(x) [79-80]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,options(d=e),,
--
CreateTableFunctionStatement(is_or_replace) [0-62]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  OptionsList [57-62]
    OptionsEntry [58-61]
      Identifier(d) [58-59]
      PathExpression [60-61]
        Identifier(e) [60-61]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: or replace,,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-85]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  Identifier(testlang) [60-68]
  Query [72-85]
    Select [72-85]
      SelectList [79-85]
        SelectColumn [79-85]
          IntLiteral(1) [79-80]
          Alias [81-85]
            Identifier(x) [84-85]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,language testlang,
--
CreateTableFunctionStatement(is_or_replace) [0-68]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  Identifier(testlang) [60-68]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-68]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
  Query [55-68]
    Select [55-68]
      SelectList [62-68]
        SelectColumn [62-68]
          IntLiteral(1) [62-63]
          Alias [64-68]
            Identifier(x) [67-68]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-48]
  FunctionDeclaration [36-48]
    PathExpression [36-46]
      Identifier(myfunction) [36-46]
    FunctionParameters [46-48]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-131]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  OptionsList [91-96]
    OptionsEntry [92-95]
      Identifier(d) [92-93]
      PathExpression [94-95]
        Identifier(e) [94-95]
  Identifier(testlang) [106-114]
  Query [118-131]
    Select [118-131]
      SelectList [125-131]
        SelectColumn [125-131]
          IntLiteral(1) [125-126]
          Alias [127-131]
            Identifier(x) [130-131]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  OptionsList [91-96]
    OptionsEntry [92-95]
      Identifier(d) [92-93]
      PathExpression [94-95]
        Identifier(e) [94-95]
  Identifier(testlang) [106-114]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  OptionsList [91-96]
    OptionsEntry [92-95]
      Identifier(d) [92-93]
      PathExpression [94-95]
        Identifier(e) [94-95]
  Query [101-114]
    Select [101-114]
      SelectList [108-114]
        SelectColumn [108-114]
          IntLiteral(1) [108-109]
          Alias [110-114]
            Identifier(x) [113-114]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-96]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  OptionsList [91-96]
    OptionsEntry [92-95]
      Identifier(d) [92-93]
      PathExpression [94-95]
        Identifier(e) [94-95]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-119]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  Identifier(testlang) [94-102]
  Query [106-119]
    Select [106-119]
      SelectList [113-119]
        SelectColumn [113-119]
          IntLiteral(1) [113-114]
          Alias [115-119]
            Identifier(x) [118-119]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-102]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  Identifier(testlang) [94-102]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-102]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
  Query [89-102]
    Select [89-102]
      SelectList [96-102]
        SelectColumn [96-102]
          IntLiteral(1) [96-97]
          Alias [98-102]
            Identifier(x) [101-102]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-83]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  TVFSchema [69-83]
    TVFSchemaColumn [75-82]
      Identifier(x) [75-76]
      SimpleType [77-82]
        PathExpression [77-82]
          Identifier(int64) [77-82]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-109]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Identifier(testlang) [84-92]
  Query [96-109]
    Select [96-109]
      SelectList [103-109]
        SelectColumn [103-109]
          IntLiteral(1) [103-104]
          Alias [105-109]
            Identifier(x) [108-109]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-92]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Identifier(testlang) [84-92]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-92]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Query [79-92]
    Select [79-92]
      SelectList [86-92]
        SelectColumn [86-92]
          IntLiteral(1) [86-87]
          Alias [88-92]
            Identifier(x) [91-92]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-74]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-97]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  Identifier(testlang) [72-80]
  Query [84-97]
    Select [84-97]
      SelectList [91-97]
        SelectColumn [91-97]
          IntLiteral(1) [91-92]
          Alias [93-97]
            Identifier(x) [96-97]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-80]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  Identifier(testlang) [72-80]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-80]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
  Query [67-80]
    Select [67-80]
      SelectList [74-80]
        SelectColumn [74-80]
          IntLiteral(1) [74-75]
          Alias [76-80]
            Identifier(x) [79-80]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-60]
  FunctionDeclaration [48-60]
    PathExpression [48-58]
      Identifier(myfunction) [48-58]
    FunctionParameters [58-60]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-118]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  OptionsList [78-83]
    OptionsEntry [79-82]
      Identifier(d) [79-80]
      PathExpression [81-82]
        Identifier(e) [81-82]
  Identifier(testlang) [93-101]
  Query [105-118]
    Select [105-118]
      SelectList [112-118]
        SelectColumn [112-118]
          IntLiteral(1) [112-113]
          Alias [114-118]
            Identifier(x) [117-118]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp) [0-101]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  OptionsList [78-83]
    OptionsEntry [79-82]
      Identifier(d) [79-80]
      PathExpression [81-82]
        Identifier(e) [81-82]
  Identifier(testlang) [93-101]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-101]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  OptionsList [78-83]
    OptionsEntry [79-82]
      Identifier(d) [79-80]
      PathExpression [81-82]
        Identifier(e) [81-82]
  Query [88-101]
    Select [88-101]
      SelectList [95-101]
        SelectColumn [95-101]
          IntLiteral(1) [95-96]
          Alias [97-101]
            Identifier(x) [100-101]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_temp) [0-83]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  OptionsList [78-83]
    OptionsEntry [79-82]
      Identifier(d) [79-80]
      PathExpression [81-82]
        Identifier(e) [81-82]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-106]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  Identifier(testlang) [81-89]
  Query [93-106]
    Select [93-106]
      SelectList [100-106]
        SelectColumn [100-106]
          IntLiteral(1) [100-101]
          Alias [102-106]
            Identifier(x) [105-106]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_temp) [0-89]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  Identifier(testlang) [81-89]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-89]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
  Query [76-89]
    Select [76-89]
      SelectList [83-89]
        SelectColumn [83-89]
          IntLiteral(1) [83-84]
          Alias [85-89]
            Identifier(x) [88-89]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_temp) [0-70]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  TVFSchema [56-70]
    TVFSchemaColumn [62-69]
      Identifier(x) [62-63]
      SimpleType [64-69]
        PathExpression [64-69]
          Identifier(int64) [64-69]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-96]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  OptionsList [56-61]
    OptionsEntry [57-60]
      Identifier(d) [57-58]
      PathExpression [59-60]
        Identifier(e) [59-60]
  Identifier(testlang) [71-79]
  Query [83-96]
    Select [83-96]
      SelectList [90-96]
        SelectColumn [90-96]
          IntLiteral(1) [90-91]
          Alias [92-96]
            Identifier(x) [95-96]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_temp) [0-79]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  OptionsList [56-61]
    OptionsEntry [57-60]
      Identifier(d) [57-58]
      PathExpression [59-60]
        Identifier(e) [59-60]
  Identifier(testlang) [71-79]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-79]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  OptionsList [56-61]
    OptionsEntry [57-60]
      Identifier(d) [57-58]
      PathExpression [59-60]
        Identifier(e) [59-60]
  Query [66-79]
    Select [66-79]
      SelectList [73-79]
        SelectColumn [73-79]
          IntLiteral(1) [73-74]
          Alias [75-79]
            Identifier(x) [78-79]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,options(d=e),,
--
CreateTableFunctionStatement(is_temp) [0-61]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  OptionsList [56-61]
    OptionsEntry [57-60]
      Identifier(d) [57-58]
      PathExpression [59-60]
        Identifier(e) [59-60]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: temporary,,,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-84]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  Identifier(testlang) [59-67]
  Query [71-84]
    Select [71-84]
      SelectList [78-84]
        SelectColumn [78-84]
          IntLiteral(1) [78-79]
          Alias [80-84]
            Identifier(x) [83-84]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,language testlang,
--
CreateTableFunctionStatement(is_temp) [0-67]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  Identifier(testlang) [59-67]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-67]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
  Query [54-67]
    Select [54-67]
      SelectList [61-67]
        SelectColumn [61-67]
          IntLiteral(1) [61-62]
          Alias [63-67]
            Identifier(x) [66-67]
--
CREATE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,
--
CreateTableFunctionStatement(is_temp) [0-47]
  FunctionDeclaration [35-47]
    PathExpression [35-45]
      Identifier(myfunction) [35-45]
    FunctionParameters [45-47]
--
CREATE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-122]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  OptionsList [82-87]
    OptionsEntry [83-86]
      Identifier(d) [83-84]
      PathExpression [85-86]
        Identifier(e) [85-86]
  Identifier(testlang) [97-105]
  Query [109-122]
    Select [109-122]
      SelectList [116-122]
        SelectColumn [116-122]
          IntLiteral(1) [116-117]
          Alias [118-122]
            Identifier(x) [121-122]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-105]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  OptionsList [82-87]
    OptionsEntry [83-86]
      Identifier(d) [83-84]
      PathExpression [85-86]
        Identifier(e) [85-86]
  Identifier(testlang) [97-105]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-105]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  OptionsList [82-87]
    OptionsEntry [83-86]
      Identifier(d) [83-84]
      PathExpression [85-86]
        Identifier(e) [85-86]
  Query [92-105]
    Select [92-105]
      SelectList [99-105]
        SelectColumn [99-105]
          IntLiteral(1) [99-100]
          Alias [101-105]
            Identifier(x) [104-105]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement(is_if_not_exists) [0-87]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  OptionsList [82-87]
    OptionsEntry [83-86]
      Identifier(d) [83-84]
      PathExpression [85-86]
        Identifier(e) [85-86]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-110]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  Identifier(testlang) [85-93]
  Query [97-110]
    Select [97-110]
      SelectList [104-110]
        SelectColumn [104-110]
          IntLiteral(1) [104-105]
          Alias [106-110]
            Identifier(x) [109-110]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-93]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  Identifier(testlang) [85-93]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-93]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
  Query [80-93]
    Select [80-93]
      SelectList [87-93]
        SelectColumn [87-93]
          IntLiteral(1) [87-88]
          Alias [89-93]
            Identifier(x) [92-93]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-74]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  TVFSchema [60-74]
    TVFSchemaColumn [66-73]
      Identifier(x) [66-67]
      SimpleType [68-73]
        PathExpression [68-73]
          Identifier(int64) [68-73]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: if not exists,,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-100]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  OptionsList [60-65]
    OptionsEntry [61-64]
      Identifier(d) [61-62]
      PathExpression [63-64]
        Identifier(e) [63-64]
  Identifier(testlang) [75-83]
  Query [87-100]
    Select [87-100]
      SelectList [94-100]
        SelectColumn [94-100]
          IntLiteral(1) [94-95]
          Alias [96-100]
            Identifier(x) [99-100]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,options(d=e),language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-83]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  OptionsList [60-65]
    OptionsEntry [61-64]
      Identifier(d) [61-62]
      PathExpression [63-64]
        Identifier(e) [63-64]
  Identifier(testlang) [75-83]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-83]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  OptionsList [60-65]
    OptionsEntry [61-64]
      Identifier(d) [61-62]
      PathExpression [63-64]
        Identifier(e) [63-64]
  Query [70-83]
    Select [70-83]
      SelectList [77-83]
        SelectColumn [77-83]
          IntLiteral(1) [77-78]
          Alias [79-83]
            Identifier(x) [82-83]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,options(d=e),,
--
CreateTableFunctionStatement(is_if_not_exists) [0-65]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  OptionsList [60-65]
    OptionsEntry [61-64]
      Identifier(d) [61-62]
      PathExpression [63-64]
        Identifier(e) [63-64]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: if not exists,,,language testlang,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-88]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  Identifier(testlang) [63-71]
  Query [75-88]
    Select [75-88]
      SelectList [82-88]
        SelectColumn [82-88]
          IntLiteral(1) [82-83]
          Alias [84-88]
            Identifier(x) [87-88]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,language testlang,
--
CreateTableFunctionStatement(is_if_not_exists) [0-71]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  Identifier(testlang) [63-71]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-71]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
  Query [58-71]
    Select [58-71]
      SelectList [65-71]
        SelectColumn [65-71]
          IntLiteral(1) [65-66]
          Alias [67-71]
            Identifier(x) [70-71]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-51]
  FunctionDeclaration [39-51]
    PathExpression [39-49]
      Identifier(myfunction) [39-49]
    FunctionParameters [49-51]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-109]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Identifier(testlang) [84-92]
  Query [96-109]
    Select [96-109]
      SelectList [103-109]
        SelectColumn [103-109]
          IntLiteral(1) [103-104]
          Alias [105-109]
            Identifier(x) [108-109]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),language testlang,
--
CreateTableFunctionStatement [0-92]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Identifier(testlang) [84-92]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),,as select 1 as x
--
CreateTableFunctionStatement [0-92]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
  Query [79-92]
    Select [79-92]
      SelectList [86-92]
        SelectColumn [86-92]
          IntLiteral(1) [86-87]
          Alias [88-92]
            Identifier(x) [91-92]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,options(d=e),,
--
CreateTableFunctionStatement [0-74]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  OptionsList [69-74]
    OptionsEntry [70-73]
      Identifier(d) [70-71]
      PathExpression [72-73]
        Identifier(e) [72-73]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (d = e)
--
ALTERNATION GROUP: returns table<x int64>,,language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-97]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  Identifier(testlang) [72-80]
  Query [84-97]
    Select [84-97]
      SelectList [91-97]
        SelectColumn [91-97]
          IntLiteral(1) [91-92]
          Alias [93-97]
            Identifier(x) [96-97]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,language testlang,
--
CreateTableFunctionStatement [0-80]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  Identifier(testlang) [72-80]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,,,as select 1 as x
--
CreateTableFunctionStatement [0-80]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
  Query [67-80]
    Select [67-80]
      SelectList [74-80]
        SelectColumn [74-80]
          IntLiteral(1) [74-75]
          Alias [76-80]
            Identifier(x) [79-80]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,
--
CreateTableFunctionStatement [0-61]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  TVFSchema [47-61]
    TVFSchemaColumn [53-60]
      Identifier(x) [53-54]
      SimpleType [55-60]
        PathExpression [55-60]
          Identifier(int64) [55-60]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: options(d=e),language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-87]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  OptionsList [47-52]
    OptionsEntry [48-51]
      Identifier(d) [48-49]
      PathExpression [50-51]
        Identifier(e) [50-51]
  Identifier(testlang) [62-70]
  Query [74-87]
    Select [74-87]
      SelectList [81-87]
        SelectColumn [81-87]
          IntLiteral(1) [81-82]
          Alias [83-87]
            Identifier(x) [86-87]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(d=e),language testlang,
--
CreateTableFunctionStatement [0-70]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  OptionsList [47-52]
    OptionsEntry [48-51]
      Identifier(d) [48-49]
      PathExpression [50-51]
        Identifier(e) [50-51]
  Identifier(testlang) [62-70]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) LANGUAGE testlang
--
ALTERNATION GROUP: options(d=e),,as select 1 as x
--
CreateTableFunctionStatement [0-70]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  OptionsList [47-52]
    OptionsEntry [48-51]
      Identifier(d) [48-49]
      PathExpression [50-51]
        Identifier(e) [50-51]
  Query [57-70]
    Select [57-70]
      SelectList [64-70]
        SelectColumn [64-70]
          IntLiteral(1) [64-65]
          Alias [66-70]
            Identifier(x) [69-70]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(d=e),,
--
CreateTableFunctionStatement [0-52]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  OptionsList [47-52]
    OptionsEntry [48-51]
      Identifier(d) [48-49]
      PathExpression [50-51]
        Identifier(e) [50-51]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (d = e)
--
ALTERNATION GROUP: language testlang,as select 1 as x
--
CreateTableFunctionStatement [0-75]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  Identifier(testlang) [50-58]
  Query [62-75]
    Select [62-75]
      SelectList [69-75]
        SelectColumn [69-75]
          IntLiteral(1) [69-70]
          Alias [71-75]
            Identifier(x) [74-75]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: language testlang,
--
CreateTableFunctionStatement [0-58]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  Identifier(testlang) [50-58]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: as select 1 as x
--
CreateTableFunctionStatement [0-58]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
  Query [45-58]
    Select [45-58]
      SelectList [52-58]
        SelectColumn [52-58]
          IntLiteral(1) [52-53]
          Alias [54-58]
            Identifier(x) [57-58]
--
CREATE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: <empty>
--
CreateTableFunctionStatement [0-38]
  FunctionDeclaration [26-38]
    PathExpression [26-36]
      Identifier(myfunction) [26-36]
    FunctionParameters [36-38]
--
CREATE TABLE FUNCTION myfunction()
